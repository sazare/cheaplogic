[[view prover]
this is a prover with the resolution and some human interactions through web views.

the proving style is a goal reduction to contradiction(empty goal).

this has 3 ways to reduct a goal.

 1) remove a literal evaluated to false. this means the neg of the literal 
    should be true by julia(computing system).
 2) remove a literal that ask a correspoinding query to a humanb and get an anser.
    Namely a human's input make a literal, that should be true.
 3) remove a literal resolved with a clause in cnf.

- a query view correspoinding a litral
 for a literal as P(x, 2), i can make a view like [x:"", y:"2"]. 
 a view has some headers, footers and some other components. 
 [key:value,...] is an expression to focus a key/value part of the view.
 
- a literal evaluated
 a literal expression :(-(eq 2 3)) can be evaluated in Julia context.
 (-(eq x y)) is a literal and may be resolved upon an other literal 
 but evaluate eq(2,3) is the quickest way to resolve :(-(eq 2,3)).


[How to use it]

1. add a package Genie
    Genie => https://github.com/GenieFramework/Genie.jl
    ] add https://github.com/genieframework/Genie.jl

2. load view prover
   include("load_viewprover.jl")
3. run Chrome with 
   http://localhost:8000/go?op=start

4. proving steps are...
   0) choose the cnf file(with specifying path)
   1) select goal clause in the core printing
   2) after that, repeat core showed, select a clause...
      sometime, prover just show the resolvent without choice.
      then just ok.

* sample cnf for testing(belows are state of 2019/0713)
 vdata/vev002.cnf 's following clause(id) can be a goal respectively.
 -> show the operation and result.

C1:[x_C1,y_C1].[L13:-(ge(2,5)),L14:-(ge(4,55)),L15:-(ge(5,9))]
C2:[x_C2,y_C2].[L1:-(ge(12,5)),L2:-(ge(114,55)),L3:-(ge(115,9))]
C3:[x_C3,y_C3].[L60:-(P(x_C3,y_C3))]
C4:[x_C4,y_C4,z_C4,w_C4].[L25:-(P(x_C4,y_C4)),L26:-(R(z_C4,w_C4))]
C5:[x_C5,y_C5].[L27:-(P(x_C5,y_C5)),L28:-(ge(2,1)),L29:-(ge(4,2)),L30:-(ge(5,2))]
C6:[x_C6,y_C6].[L52:-(ge(2,1)),L53:-(ge(4,2)),L54:-(ge(5,2)),L55:-(P(x_C6,y_C6))]
C7:[x_C7,y_C7].[L56:-(ge(2,1)),L57:-(ge(x_C7,y_C7)),L58:-(ge(5,2)),L59:-(P(x_C7,y_C7))]
C8:[x_C8,y_C8].[L9:-(P(x_C8,y_C8)),L10:-(ge(2,1)),L11:-(ge(x_C8,y_C8)),L12:-(ge(5,2))]
C9:[x_C9,y_C9,z_C9,w_C9].[L42:-(ge(x_C9,y_C9)),L43:-(P(x_C9,y_C9)),L44:-(R(z_C9,w_C9))]
C10:[x_C10,y_C10,z_C10,w_C10].[L4:-(ge(x_C10,y_C10)),L5:-(ge(z_C10,w_C10)),L6:-(P(x_C10,y_C10)),L7:-(R(z_C10,w_C10))]
C11:[x_C11,y_C11,z_C11,w_C11].[L20:-(ge(x_C11,y_C11)),L21:-(P(x_C11,y_C11)),L22:-(R(z_C11,w_C11)),L23:-(S(y_C11,w_C11))]
C12:[x_C12,y_C12].[L38:-(P(x_C12,y_C12)),L39:-(S(x_C12,y_C12))]
C13:[].[L24:+(S(1,2))]
C14:[x_C14,y_C14,z_C14,w_C14].[L33:-(ge(x_C14,w_C14)),L34:-(P(x_C14,y_C14)),L35:-(R(z_C14,w_C14)),L36:-(S2(y_C14,w_C14))]
C15:[].[L31:+(S2(1,2))]
C16:[x_C16,y_C16].[L32:-(P2(x_C16,y_C16))]
C17:[x_C17,y_C17].[L16:+(P2(x_C17,y_C17)),L17:-(S2(x_C17,y_C17))]
C18:[x_C18,y_C18].[L48:+(S2(x_C18,y_C18)),L49:-(ge(x_C18,y_C18))]
C19:[x_C19].[L46:-(P(x_C19,3))]
C20:[x_C20,y_C20].[L47:-(P4(x_C20,y_C20))]
C21:[x_C21,y_C21].[L18:+(P4(x_C21,y_C21)),L19:-(Q4(y_C21))]
C22:[].[L8:+(Q4(5))]
C23:[].[L51:+(Q4(6))]
C24:[y_C24].[L37:-(Q5(y_C24))]
C25:[].[L45:-(Q5(5))]
C26:[].[L50:-(Q5(6))]
C27:[x_C27,y_C27,z_C27,w_C27].[L40:-(P2(x_C27,y_C27)),L41:-(P4(w_C27,z_C27))]

PSYM: [P,P2,P4,Q4,Q5,R,S,S2,ge]
CANO: 
 [X,Y].P(X,Y)
 [X,Y].P2(X,Y)
 [W,Z].P4(W,Z)
 [Z,W].R(Z,W)

 cid 
 C1 -> 3 evals => Valid
 C2 -> 3 evals => Contradiction
 C3 -> a View with any inputs => []
 C4 -> 2 Views with any inputs => []
 C5 -> a View with any inputs follow 3 evals => []
 C6 -> 3 evals follow a View => []
 C7 -> 2 ground evals and View follow 1 eval that is a constraint x>=y => []
 C8 -> like C7 but different literals ordering => []
 C9 -> simpler than C8. constraint x>=y => []
 C10-> constraints on 2 views separetely x>=y and z>=w
  {C13} : y=1,w=2
 C11{C13}-> constraint over 1 view and independent view and resolve -S => []
 C12{C13}-> view follow a literal S with resolved => []
 C14{C1/Users/shin/Projects/github/cheaplogic/Prover/docs 5|C16}-> 2 views and a constraint follow a literal S2 with resolved =>
   with 15: constraint y=1,w=2 and x>=2 =>[] others to Valid
   with 16: constraint x>=y =>[]
 C17+{C15|C16}-> a view and resolve => 
   with C15 inputs should be x=1,y=2)
   with C16 constraint x >= y
 C18+{C15|C16}-> an eval and resolve 
   with C15 => Valid
   with C16 => []
 C19 -> view with a default input value => []
 C20 is a mistake. I intended to resolve P4 in C20 with C21. 
     but P4() has cano, therefore the resolution never happen. 
     This is an evidence such mechanism.
 C21 shows view literal have common variable(y) with reso literal(Q4)
  C22,C23 define +Q4(5) and +Q4(6). if y = 5 or 6, you will get [], and other value make can't progress result.
 C24 this with C25, C26 check no oppents -Q5, into "can't progress"
  C25,C26 can't hit -Q5 in C24
 C27 2 view with different liteal. test for partial inputs, abort.
