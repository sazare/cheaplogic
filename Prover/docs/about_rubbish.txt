#Rubbish

##Function
### substitution
1) 特徴
 S-記法
　本での代入の定義。
　Herblandの学位論文では、また違う定義になっているようなことを読んだが、未確認。

 P-記法
　並列代入。この代入の定義はややこしい。
　でも高速に実行できるはず。S-記法代入の順序に依存した部分をあらかじめ解決しておくのでそうなる。

### unification
 P記法とS記法とvars.expとvars.psを共通のvarsなのでpsからvarsをはずす件
　p記法では、varsの順番は重要ではない。
  unificationでは、mguのvarsはexpのvarsに一致させるのが自然。
  だから<v1.e1:v2.e2>を<vs.e1:vs.e2>としてvs.<e1:e2>としたとき
　mgu=vs<-tsをtsだけで表記し、たとえば
  (vs.E)*(vs.<e1:e2>)はvs.(E*<e1:e2>)と書いてしまう。

　varsの管理はunificationの処理とは直交しているということか。たぶん違う

### S記法とP記法は代入の表記および操作を意味するが、unificationの実装で
　どちらの記法でmguを作るかというのは設計の問題になる。

　unifictionpはそれ独自のアルゴリズムがあるが、unificationsの結果をs2pで
  p記法にするという方法でp記法のmguを求めるunificationspを考えた。
　アルゴリズムをながめるかぎり、こっちのほうが性能がよさそう。
  実際の性能比較はこうなった
　unifications<unificationsp<unificationp

　p-記法の代入よりもs-記法の代入のほうが高速になるはずなので、
　unificationも代入も含む、resolution全体の性能比較もしたい。

　unification中に代入を行うから、混在した処理としてはunificationだけで
　完結しているようにも思うが、代入はunificationで対象としない残りのリテラル
　に対して行うので、影響が及ぶはず。

### resolveとrename
　C1=L1vR1, C2=L2vR2のとき、<-L1:L2>=σを計算して、R=(R1vR2)*σを作るのがresolve。

　課題
　・C1とC2に共通の変数があってはならない(Chang&Leeのtpuでは前処理としてrenameする)
　　- renameの回数を数えると、resolutionに失敗した場合もrenameしているので前処理はやめたい。

　　- 後処理にすると、ほかのすべてのclauseと変数が混ざらないようにする必要がでてくる。
　　　それは(gensym)。ただ、変数の数がふえすぎるかもしれない。どっちがいいか。

　・-L1とL2にする必要があるが、mguを求めるには、L1, L2の符号を除いたatomにして<A1:A2>とするほうが話は簡単。なのでatomでunificationとする。そうするとatomもf-termもsyntaxとしては同じなので例外作らなくていい。



### リテラル
　resolventに出現するすべてのリテラルは、入力clauseのリテラルの生き残りである。
　つまり、証明の中のリテラルを遡るとすべて入力clauseのリテラルにたどり着く。
　これにこだわる必要があるかどうかわからない部分もあるが、その情報を残すとすると

       ren     res     ren     res     ren     res     res
　L100 --> L99 --> L80 --> L79 --> L50 --> L49 --> ... --> L10 --> *
       ρ50     σ50     ρ40     σ40     ρ25     σ25     σ1   ↓     
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Lit10
　という構造が考えられる。
　L100,L99,...はLiteralID。
　Lit10はリテラルそのもので(+ P a x (f x y) (g y))のようなもの。
　L100に対応するリテラルは Lit10*σ1*...*σ50*ρ50 で求められる。
　各LiterlIDに裸のリテラル(naked literal)を持たせることも考えられる。

　代入を適用するためにはvarsが必要であり、varsはリテラルでなくclauseに対応するので
　Ln から Cm(clauseid) を求め、Cmからそのvars_mを求める仕組みは必要になる。

### 変数管理
　resolveでは、両方のリテラルに共通の変数がないことを前提としている。はず。
　Chang&LeeのTPUでは、resolutionをする前に共通の変数をrenameしていたと思う。
　そもそも、変数リストは固定で、resolutionするときに変数名を付け替えていたようなきがする。

　rubbishでは、前処理のrenameはやらず、すべてのclause/resolventがDisjoined Variables Condition(DVC)
　を満たすようにする。
  そのため、入力clauseの変数はすべて異なる名前につけかえ、resolventは生成されたら変数名をつけかえる。
　このため、ρ_nをもとめる処理がはいっている。ρ_nの計算は簡単なので性能劣化にはつながらないはずだ。

　もしも前処理でrenameをすると、renameしたclauseを証明に残すか残さないかという設計判断も
　でてくるが、残さなくてもごまかせるような気はする。
　そうなるとresolventの数が半分になるので、やはり処理速度とメモリ使用量のトレードオフ。

　変数名の作り方としては、オリジナルの部分を残し、X.001 のように生成して、printのモードでXのみにする
という方法(julia版)もある。


### C1とC1のresolveでは共通変数がでてくるのではないか
　考えている証明の手順は、goalベースであり、この場合、自分とresolveすることはないので問題にならない。
　
　だとすると、作っているのは汎用のproverでない。(input resolutionとかそういうの)
　goalベースの限界を超えるようなものはやらないのか??
　そのときはそのときまた考える。

### PvPvRからPvRを作るルール
　これをやろうと思うと、前処理のrenameがどうしても必要になる。
　どう考えていたのか忘れた。renameする必要はないと思う。

### リテラルID、ClauseID、mguid

概要
  Lid → Cid -|body|→ Lid* (clauseを構成するliteralid)
　↓naked　↓ \
　Lit　 vars Mid

詳細
naked literalが必要なのはいつか
Graphを作ったらもっと不要になるのでは??

--
入力とIDの構造
入力のclauseがこういう形
(1 (x y) (+ P x)(- R x (f y x))(+ Q x y))

のとき
これのCidは C1:xxx
Lidは
L1_1:xxx (+ P x)
L1_2:xxx (- R x (f y x))
L1_3:xxx (+ Q x y)

C1:xxx のmguは
M1:xxx

とする。
--
IDの形式
  Cn:xxxx
  Ln_m:xxxx
  Mn:xxxx

nは入力clauseの番号
mはclause中のliteralの順番(左端が1)
xxxxは自動生成された数字

以下の説明では:xxxxの部分は略する。

--
　Lid→|orig|→Lid | nil
     →|naked|→ Literal 
     →|cid|→Cid

  LidのnakedのLitの変数は、Lidのcidのvars
  nakedは入力literalだけが持ち、resolventのliteralは入力literalに途中の代入をかけて
　毎回作るという設計もある。時間かかりそうだが、そのnakedのliteralはresolveのときのみ
　必要になるが、最小限必要な情報は何か? literal全体が必要なのか・・・
　σを計算するunificationのときは必要だが、resolventを作るのには必要がない。

--
Literal = (sign . term) 
 term = (fsym. args) | atom
 fsym::<atom> = 述語記号、命題記号、関数記号
 args   = (term ...)
 atom = <atom> | <number> | <string>
--
  Cid→|vars|→var*
     →|body|→Lid*
     →|subs|→Mid
     →|right|→Lid
     →|left|→Lid
     →|parent|→Cid

varはatom/symbol
resolveの場合はright,leftはあるが、renameの場合はleft,rightはnil。
renameの場合は、parentはあるが、resolveの場合はparentはない
resolveの場合、親のclauseは right.orig.cidとleft.orig.cidになる。
例外になっている・・・

--
　Mid→|naked|→(term...)

--
関係

[renameの場合]
  R1'
 ---- ρ
  R1 
で、R1=L1 L2 ..., R1'=L1' L2' ...

の場合
L1.orig = L1'
L1.cid = R1'
L2.orig = L2'
L2.cid = R1'

R1.subs = ρ
R1.parent = R1'
であるので、

ρ = R1.subs = renaming(R1.parent.vars)
となる。renamingは、varsから独立した新しい変数リストを作る。

[resolveの場合]

  C1  C2
 ---------σ
    R1

で、消えたリテラルがC1とC2のL1.1とL2.1だった場合、
σ' = <L1.1:L2.1>
R1.vars = union(L1.1.cid.vars L1.2.cid.vars)*σ' の変数をuniqueにしたリストであり
R1.subs = σ'からR1.varsに対応するもののみを取り出したリスト
R1.body = L3.1 L3.2 L3.3がったとして、たとえばこうなる。
L3.1.orig = L1.2
L3.1.orig.cid = C1
L3.2.orig = L2.2
L3.2.orig.cid = C2
L3.3.orig = L2.3
L3.3.orig.cid = C2

[証明構造]
 lid が与えられたとき、lidのparentを辿って入力リテラルまでたどり着くと
そこにでてきたすべてのlid → cid → vars.mguを適用して今のlitを再構成できる。

 rootof(Lid)    : Lidをたどりorigがnilであるlid
 nakedof(Lid)   : rootidof(Lid)のnaked 
 literalof(Lid) : Lidの実体。rootof(Lid)からLidまでの代入をすべて適用したリテラル
　　　　　　　　　うわあ、時間かかりそう・・・




--
設計が矛盾していないか?
DVCとproofにrename前と後のclauseを残すようにしているのに
なぜここにきてメモリを節約するのか・・・
まあ、cid, lid, midで実体があるのはliteralとmguだけだから、一貫してはいるのか・・・

litを作るときの途中計算は消えるよね・・・

resolventの実体であるリテラルは、作られることがない・・

ρはresolventを作るときにはLitに適用しない。
σもresolventに適用する必要がない。

printclauseみたいなことをしたとき、実体のliteralが出現する。
それは一時的であってほしい


### clauseの追加について
　Machne LearningでFactが追加され、帰納推論によってルールが追加されるようなものを
  最終的には作りたいと思っている。
　となると、時間がたつとAxiomsを追加したり削除したりがしたくなるはず。
　ここまでの設計なら、clauseの追加には耐えられるだろう。

  複数のAxiomsが並存しなくてはならないと思う。



##Implementation
### Julia版のCORE相当


