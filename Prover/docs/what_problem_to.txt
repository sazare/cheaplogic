20191019土

回路の問題を考えていくと、Axiomを使って、どのような問題を解きたいのかが曖昧だったと気づく。
AxiomとかFactとかの意味もはっきりしてきたかはっきりしていない。

Axiomsで何を記述し、どのような問に答えるのか?

goal(Γ)とは質問であり、Axioms(Σ)からΣ → Γの証明で生まれる代入σがその質問への答えを生む。
というスキームがあると思う。

clauseであることの特殊性として、Γもまたclause setになる。
[]の証明で、Γのすべてのclauseを使わなくてはならないという制約も必要かも。


1. 回路の場合
考えると、回路の場合はこのようなタイプの問(goal)がありうる

1. Axiomsをその製品の仕様と考える。利用者に見える部分を変数とするリテラル/述語が
　その製品のある状態を表し、goalは、その製品のある状態を表す(ground clause)
　その状態が製品の仕様に整合しているかどうかの問? 

　ある製品はいろいろな側面を持つので、製品全体について仕様の可否を考えようとする
とgoalに含まれるすべてのclauseが成り立つ必要がある。(goalのclauseすべてを使った証明制約)
だろうか??

2. 実際の製品を使っているとき、発生した状態をground clauseで表現する。
　製品が正常動作しているかどうかのテストができる。

3. Goalに変数を含むとき。ある条件で、その製品が取りうる状態を調べられる。
　これは、製品に対する問い合わせの回答を与える。

4. ある状態のGoalから始め、それが異常であるとき、どこに原因があるかをテストで調べたい。
　テスト結果はFactとしてAxiomsに追加できるが、Fact+Axioms |- []の場合、製品は異常である。
　片方しかないリテラル(+Pに対する-Pがないなど)があると、そこからCano経由で外部にFactを
　尋ねることができ、それがテストの誘発になる。
　それは仕様の欠陥かもしれない。仕様にすべてが書かれていたら、正しいはずの仕様(=Fact)が
　現状のFactと矛盾して、原因がわかるはず。

　このように、Factには、期待のFactと観測されたFactがある。

　期待のFactはFactではないのだろうか。

　


2. 記述の構造化。それができる証明器のありかた。
　製品を書いていくと、部品についての記述と製品についての記述などに分かれているように見える。

2.1) 期待と観測
　製品の仕様は、期待のFactであり、そのレベルでの記述集合はある。
　それがないと、製品に関するあらゆる事柄が、まきこまれてしまう。
　それが証明のメリットではあるが、証明機構には定理というものがあり、全体のまきこみを防ぐ。

　期待と現実をどう区別すればよいのだろうか。
　期待の定理は、あくまでも期待についての推論結果。
　観測のFactから、正しい推論によって得られた観測の定理は、現実世界について成り立つ推論。

　期待と観測を区別し、その間の矛盾を観察するというのが正当な気がする。

2.2) 製品dとそれを構成する部品p
　dの構造についての記述は、エンドユーザには見えない。
　dのユーザに見える部分が、ユーザに対するdの状態と解釈できる。
　ユーザというが、dがおかしな振る舞いをしたとき、調査する人は、その文脈でのdのユーザであり
　文脈がかわると、dについて見える部分もかわる。

　パーツpは、状態をもち、そのdにアクセス/観察する誰かはその状態を見て、それを部品dの状態と
　解釈するしかない。

　構造と状態=機能の関連はどうなるか??

　どんどん分解して記述できるのか?




