# most simple circuit and full description
### goal is how about switch off and lamp black with battery charged


## rce2,cce2=simpleprover("data/cire002.cnf",7,7)
# julia> printproofs1(cce2)
# 
# C1:[l_C1,s_C1,b_C1]. L4.-(Dev(L, black, S, off, B, charged))
# C10:[L,x_C10,S,y_C10,B,z_C10]. L5.-(Currd(L, x_C10, S, y_C10, B, z_C10)), L6.+(Dev(L, x_C10, S, y_C10, B, z_C10))
#   <L4:L6>=[l_C1,s_C1,b_C1,L,x_C10,S,y_C10,B,z_C10]←[l_C1,s_C1,b_C1,L,black,S,off,B,charged] by reso
# R1:[L,S,B]. L5_R1.-(Currd(L, black, S, off, B, charged))
# C9:[L,l_C9,S,s_C9,B,b_C9]. L13.-(Curr(p1, p2, L, l_C9)), L14.-(Curr(p2, p3, S, s_C9)), L15.-(Curr(p3, p1, B, b_C9)), L16.+(Currd(L, l_C9, S, s_C9, B, b_C9))
#   <L5_R1:L16>=[L,S,B,L,l_C9,S,s_C9,B,b_C9]←[L,S,B,L,black,S,off,B,charged] by reso
# R2:[L,S,B]. L13_R2.-(Curr(p1, p2, L, black)), L14_R2.-(Curr(p2, p3, S, off)), L15_R2.-(Curr(p3, p1, B, charged))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L13_R2:L18>=[L,S,B,p1_C5,p2_C5,X,x_C5]←[X,S,B,p1,p2,X,black] by reso
# R3:[S,B,X]. L14_R3.-(Curr(p2, p3, S, off)), L15_R3.-(Curr(p3, p1, B, charged)), L17_R3.-(Work(p1, X, p2))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L14_R3:L18>=[S,B,X,p1_C5,p2_C5,X,x_C5]←[X,B,X,p2,p3,X,off] by reso
# R4:[B,X]. L15_R4.-(Curr(p3, p1, B, charged)), L17_R4.-(Work(p2, X, p3)), L17_R4.-(Work(p2, X, p3))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L15_R4:L18>=[B,X,p1_C5,p2_C5,X,x_C5]←[X,X,p3,p1,X,charged] by reso
# R6:[X]. L17_R6.-(Work(p3, X, p1)), L17_R6.-(Work(p3, X, p1))
# C3:[x_C3,y_C3]. L11.+(Work(x_C3, B, y_C3))
#   <L17_R6:L11>=[X,x_C3,y_C3]←[B,p3,p1] by reso
# R10:[].□
# ---
# 
# C1:[l_C1,s_C1,b_C1]. L4.-(Dev(L, black, S, off, B, charged))
# C10:[L,x_C10,S,y_C10,B,z_C10]. L5.-(Currd(L, x_C10, S, y_C10, B, z_C10)), L6.+(Dev(L, x_C10, S, y_C10, B, z_C10))
#   <L4:L6>=[l_C1,s_C1,b_C1,L,x_C10,S,y_C10,B,z_C10]←[l_C1,s_C1,b_C1,L,black,S,off,B,charged] by reso
# R1:[L,S,B]. L5_R1.-(Currd(L, black, S, off, B, charged))
# C9:[L,l_C9,S,s_C9,B,b_C9]. L13.-(Curr(p1, p2, L, l_C9)), L14.-(Curr(p2, p3, S, s_C9)), L15.-(Curr(p3, p1, B, b_C9)), L16.+(Currd(L, l_C9, S, s_C9, B, b_C9))
#   <L5_R1:L16>=[L,S,B,L,l_C9,S,s_C9,B,b_C9]←[L,S,B,L,black,S,off,B,charged] by reso
# R2:[L,S,B]. L13_R2.-(Curr(p1, p2, L, black)), L14_R2.-(Curr(p2, p3, S, off)), L15_R2.-(Curr(p3, p1, B, charged))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L13_R2:L18>=[L,S,B,p1_C5,p2_C5,X,x_C5]←[X,S,B,p1,p2,X,black] by reso
# R3:[S,B,X]. L14_R3.-(Curr(p2, p3, S, off)), L15_R3.-(Curr(p3, p1, B, charged)), L17_R3.-(Work(p1, X, p2))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L14_R3:L18>=[S,B,X,p1_C5,p2_C5,X,x_C5]←[X,B,X,p2,p3,X,off] by reso
# R4:[B,X]. L15_R4.-(Curr(p3, p1, B, charged)), L17_R4.-(Work(p2, X, p3)), L17_R4.-(Work(p2, X, p3))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L15_R4:L18>=[B,X,p1_C5,p2_C5,X,x_C5]←[X,X,p3,p1,X,charged] by reso
# R6:[X]. L17_R6.-(Work(p3, X, p1)), L17_R6.-(Work(p3, X, p1))
# C4:[x_C4,y_C4]. L12.+(Work(x_C4, S, y_C4))
#   <L17_R6:L12>=[X,x_C4,y_C4]←[S,p3,p1] by reso
# R11:[].□
# ---
# 
# C1:[l_C1,s_C1,b_C1]. L4.-(Dev(L, black, S, off, B, charged))
# C10:[L,x_C10,S,y_C10,B,z_C10]. L5.-(Currd(L, x_C10, S, y_C10, B, z_C10)), L6.+(Dev(L, x_C10, S, y_C10, B, z_C10))
#   <L4:L6>=[l_C1,s_C1,b_C1,L,x_C10,S,y_C10,B,z_C10]←[l_C1,s_C1,b_C1,L,black,S,off,B,charged] by reso
# R1:[L,S,B]. L5_R1.-(Currd(L, black, S, off, B, charged))
# C9:[L,l_C9,S,s_C9,B,b_C9]. L13.-(Curr(p1, p2, L, l_C9)), L14.-(Curr(p2, p3, S, s_C9)), L15.-(Curr(p3, p1, B, b_C9)), L16.+(Currd(L, l_C9, S, s_C9, B, b_C9))
#   <L5_R1:L16>=[L,S,B,L,l_C9,S,s_C9,B,b_C9]←[L,S,B,L,black,S,off,B,charged] by reso
# R2:[L,S,B]. L13_R2.-(Curr(p1, p2, L, black)), L14_R2.-(Curr(p2, p3, S, off)), L15_R2.-(Curr(p3, p1, B, charged))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L13_R2:L18>=[L,S,B,p1_C5,p2_C5,X,x_C5]←[X,S,B,p1,p2,X,black] by reso
# R3:[S,B,X]. L14_R3.-(Curr(p2, p3, S, off)), L15_R3.-(Curr(p3, p1, B, charged)), L17_R3.-(Work(p1, X, p2))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L14_R3:L18>=[S,B,X,p1_C5,p2_C5,X,x_C5]←[X,B,X,p2,p3,X,off] by reso
# R4:[B,X]. L15_R4.-(Curr(p3, p1, B, charged)), L17_R4.-(Work(p2, X, p3)), L17_R4.-(Work(p2, X, p3))
# C5:[p1_C5,p2_C5,X,x_C5]. L17.-(Work(p1_C5, X, p2_C5)), L18.+(Curr(p1_C5, p2_C5, X, x_C5))
#   <L15_R4:L18>=[B,X,p1_C5,p2_C5,X,x_C5]←[X,X,p3,p1,X,charged] by reso
# R6:[X]. L17_R6.-(Work(p3, X, p1)), L17_R6.-(Work(p3, X, p1))
# C2:[x_C2,y_C2]. L3.+(Work(x_C2, L, y_C2))
#   <L17_R6:L3>=[X,x_C2,y_C2]←[L,p3,p1] by reso
# R12:[].□
# ---


# julia> printmgu(:R10,cce2,true)
# 
# R1:<L4:L6>=x_C10/black; y_C10/off; z_C10/charged; 
# R2:<L5_R1:L16>=l_C9/black; s_C9/off; b_C9/charged; 
# R3:<L13_R2:L18>=L/X; p1_C5/p1; p2_C5/p2; x_C5/black; 
# R4:<L14_R3:L18>=S/X; p1_C5/p2; p2_C5/p3; x_C5/off; 
# R6:<L15_R4:L18>=B/X; p1_C5/p3; p2_C5/p1; x_C5/charged; 
# R10:<L17_R6:L11>=X/B; x_C3/p3; y_C3/p1; 
#
# julia> printmgu(:R11,cce2,true)
# 
# R1:<L4:L6>=x_C10/black; y_C10/off; z_C10/charged; 
# R2:<L5_R1:L16>=l_C9/black; s_C9/off; b_C9/charged; 
# R3:<L13_R2:L18>=L/X; p1_C5/p1; p2_C5/p2; x_C5/black; 
# R4:<L14_R3:L18>=S/X; p1_C5/p2; p2_C5/p3; x_C5/off; 
# R6:<L15_R4:L18>=B/X; p1_C5/p3; p2_C5/p1; x_C5/charged; 
# R11:<L17_R6:L12>=X/S; x_C4/p3; y_C4/p1; 
# 
# julia> printmgu(:R12,cce2,true)
# 
# R1:<L4:L6>=x_C10/black; y_C10/off; z_C10/charged; 
# R2:<L5_R1:L16>=l_C9/black; s_C9/off; b_C9/charged; 
# R3:<L13_R2:L18>=L/X; p1_C5/p1; p2_C5/p2; x_C5/black; 
# R4:<L14_R3:L18>=S/X; p1_C5/p2; p2_C5/p3; x_C5/off; 
# R6:<L15_R4:L18>=B/X; p1_C5/p3; p2_C5/p1; x_C5/charged; 
# R12:<L17_R6:L3>=X/L; x_C2/p3; y_C2/p1; 


# i separete the function from structure and theory
# cycle will be cut by empty mgu 

# D is the device
# C is the flow of electricity
# S is a switch
# L is a lamp
# B is a battery

# goal
# if switch off, the lamp should be black, any other conditions.
## workx describe about the part. Dev say the state of it.
## they should be distinguished?
[l,s,b].[-Dev(L,black,S,off,B,charged)]          # should be valid but if parts?

# other goals experimental
#[].[-Dev(L,white,S,on,B,b)]
#[l,s,b].[-Dev(D,d,L,white,S,on,B,b),-Workd(D,L,S,B)] # lamp is white when sw on. parts ok
#[l,s,b].[-Dev(d,L,white,S,s,B,b),-Workd(d,l,s,b)]  # how lamp to white when parts ok
#[l,s,b].[-Dev(d,L,black,S,on,B,b)]                 # how broken can be detected



# Facts about parts in the circuit
# These caps are var? or const?
# parts work or not depend on points of circuit.
# L,B,S are identical parts name.
# what type of parts are distinguished by the states of them.
# But I don't know here.
#  then p[123] are needed?
[x,y].[+Work(x,L,y)]
[x,y].[+Work(x,B,y)]
[x,y].[+Work(x,S,y)]

#[D,L,B,S].[-Work(p1,L,p2),-Work(p2,B,p3),-Work(p3,S,p1),+Workd(D,L,S,B)]

[p1,p2,X,x].[-Work(p1,X,p2),+Curr(p1,p2,X,x)]


#[d,L,S,B].[-Conn(p1,p2,L),-Conn(p2,p3,S),-Conn(p3,p1,B),+Connd(d,L,S,B)]

# what happen when conn by a part
[p1,p2].[-Conn(p1,p2,L),+Curr(p1,p2,L,light)]
[p1,p2].[-Conn(p1,p2,S),+Curr(p1,p2,S,on)]
[p1,p2].[-Conn(p1,p2,B),+Curr(p1,p2,B,charged)]

[L,l,S,s,B,b].[-Curr(p1,p2,L,l),-Curr(p2,p3,S,s),-Curr(p3,p1,B,b),+Currd(L,l,S,s,B,b)]

[L,x,S,y,B,z].[-Currd(L,x,S,y,B,z),+Dev(L,x,S,y,B,z)]


# Relation of the parts and a current flow
# try capital means the device, lower means it's state.

# CurrX should be distinguish, states are different kinds.
# when a device of type D worked,
#  the voltage of p1 and p2 are diff, current flow between p1,p2
# [p1,D,d,p2].[+Curr(p1,D,d,p2)]

# [p1,p2].[-Work(p1,L,p2),+CurrL(p1,L,white,p2)]
# [p1,L,p2].[-WorkL(p1,L,p2),-CurrL(p1,L,p2lack,p2)]
# [p1,L,l,p2].[+WorkL(p1,L,p2),-CurrL(p1,L,l,p2)]
# 
# [p1,S,p2].[-WorkS(p1,S,p2),+CurrS(p1,S,on,p2)]
# [p1,S,p2].[-WorkS(p1,S,p2),-CurrS(p1,S,off,p2)]
# [p1,S,s,p2].[+WorkS(p1,S,p2),-CurrS(p1,S,s,p2)]
# 
# [p1,B,p2].[-WorkB(p1,B,p2),+CurrB(p1,B,charged,p2)]
# [p1,B,p2].[-WorkB(p1,B,p2),-CurrB(p1,B,empty,p2)]
# [p1,B,p2t,p2].[+WorkB(p1,B,p2),-CurrB(p1,B,p2t,p2)]

# I want to write as this, but no Curr but CurrX
#[d,p1,p2,p3,x,y,z].[-Curr(p1,p1,x,2),-Curr(2,p2,y,3),-Curr(3,p3,z,1),+CurrD(d,x,y,z)]
#[d,p1,p2,p3,x,y,z].[-CurrL(1,p1,x,2),-CurrS(2,p2,y,3),-CurrB(3,p3,z,1),+CurrD(d,light,y,z)]


