# circuit problem level0
# parts are switch, lamp, battery 
# What to search the cause of mulfunction

# this asks what tests are needed when malfunction

# from cirf002b.cnf, just change the sign of Cause and Dev
# syntactically same proofs should appear.
# no proofs mean device is full worked.
# But searching all proofs are not done by this prover.
# just in 10x10 searching space.

##### IT IS PROBLEM

## simple +/- conversion
## Which is more fit to my intension?

# goal
## This goal ask it is malfunction or good
## This proving do after malfunction detected.

[d,cau].[-Cause(d,cau)]

## The conjecture is goal and the one of fact below
## conj: +D -> +C
## then neg conj is {+D and -C}
## and choose -C as the goal
## Fact: current state of the device
 [d].[-Dev(d,on,white,charged)]
 [d].[-Dev(d,on,black,empty)]
 [d].[-Dev(d,off,black,empty)]
 [d].[-Dev(d,off,black,charged)]
[d,w].[-Dev(d,on,black,w)]

#### if conj is +D and +C
#### neg conj is a clause -D,-C
## it is cirf002c.cnf

# axioms of functions.
[d].[+Dev(d,on,white,charged),+What(d,good)]
[d,any].[+Dev(d,off,black,any),+What(d,good)]
[d].[+Dev(d,on,black,empty),+What(d,good)]
[d].[+What(d,good)] 

[d].[+Dev(d,on,black,charged),+Mal(d,on,black,charged)]

# translate to Tests
[d,s,l,b].[-Mal(d,s,l,b),-FailS(sw),+Cause(d,switch)]
[d,s,l,b].[-Mal(d,s,l,b),-FailL(lamp),+Cause(d,lamp)]
[d,s,l,b].[-Mal(d,s,l,b),-FailB(batt),+Cause(d,battery)]


# Facts(test results) of parts.
# all test clear or someone failed?
 [].[+FailS(sw)]
 [].[+FailL(lamp)]
 [].[+FailB(batt)]

# (A) if fail just lamp, then
[].[-FailS(sw)]
[].[+FailL(lamp)]
[].[-FailB(batt)]


## rcf2c,ccf2c=simpleprover("data/cirf002c.cnf",10,10)
#==

julia> printproofs1(ccf2c)

C1:[d_C1,cau_C1]. L8.-(Cause(d_C1, cau_C1))
C9:[d_C9,s_C9,l_C9,b_C9]. L15.-(Mal(d_C9, s_C9, l_C9, b_C9)), L16.-(FailL(lamp)), L17.+(Cause(d_C9, lamp))
  <L8:L17>=[d_C1,cau_C1,d_C9,s_C9,l_C9,b_C9]←[d_C9,lamp,d_C9,s_C9,l_C9,b_C9] by reso
R2:[d_C9R2,s_C9R2,l_C9R2,b_C9R2]. L15_R2.-(Mal(d_C9R2, s_C9R2, l_C9R2, b_C9R2)), L16_R2.-(FailL(lamp))
C7:[d_C7]. L19.+(Dev(d_C7, on, black, charged)), L20.+(Mal(d_C7, on, black, charged))
  <L15_R2:L20>=[d_C9R2,s_C9R2,l_C9R2,b_C9R2,d_C7]←[d_C7,on,black,charged,d_C7] by reso
R5:[d_C7R5]. L16_R5.-(FailL(lamp)), L19_R5.+(Dev(d_C7R5, on, black, charged))
C12:[]. L14.+(FailL(lamp))
  <L16_R5:L14>=[d_C7R5]←[d_C7R5] by reso
R8:[d_C7R5R8]. L19_R8.+(Dev(d_C7R5R8, on, black, charged))
C2:[d_C2,w_C2]. L1.-(Dev(d_C2, on, black, w_C2))
  <L19_R8:L1>=[d_C7R5R8,d_C2,w_C2]←[d_C2,d_C2,charged] by reso
R10:[].□
---

C1:[d_C1,cau_C1]. L8.-(Cause(d_C1, cau_C1))
C8:[d_C8,s_C8,l_C8,b_C8]. L5.-(Mal(d_C8, s_C8, l_C8, b_C8)), L6.-(FailS(sw)), L7.+(Cause(d_C8, switch))
  <L8:L7>=[d_C1,cau_C1,d_C8,s_C8,l_C8,b_C8]←[d_C8,switch,d_C8,s_C8,l_C8,b_C8] by reso
R3:[d_C8R3,s_C8R3,l_C8R3,b_C8R3]. L5_R3.-(Mal(d_C8R3, s_C8R3, l_C8R3, b_C8R3)), L6_R3.-(FailS(sw))
C7:[d_C7]. L19.+(Dev(d_C7, on, black, charged)), L20.+(Mal(d_C7, on, black, charged))
  <L5_R3:L20>=[d_C8R3,s_C8R3,l_C8R3,b_C8R3,d_C7]←[d_C7,on,black,charged,d_C7] by reso
R6:[d_C7R6]. L6_R6.-(FailS(sw)), L19_R6.+(Dev(d_C7R6, on, black, charged))
C11:[]. L9.+(FailS(sw))
  <L6_R6:L9>=[d_C7R6]←[d_C7R6] by reso
R9:[d_C7R6R9]. L19_R9.+(Dev(d_C7R6R9, on, black, charged))
C2:[d_C2,w_C2]. L1.-(Dev(d_C2, on, black, w_C2))
  <L19_R9:L1>=[d_C7R6R9,d_C2,w_C2]←[d_C2,d_C2,charged] by reso
R11:[].□
---
# of contradictions = 2

julia> printmgus(ccf2c)

R2:<L8:L17>=cau/lamp;
R5:<L15_R2:L20>=s/on;l/black;b/charged;
R8:<L16_R5:L14>=
R10:<L19_R8:L1>=w/charged;
---

R3:<L8:L7>=cau/switch;
R6:<L5_R3:L20>=s/on;l/black;b/charged;
R9:<L6_R6:L9>=
R11:<L19_R9:L1>=w/charged;
---

CASE (A)
julia> printmgus(ccf2c)

R2:<L8:L18>=cau/lamp;
R5:<L16_R2:L21>=s/on;l/black;b/charged;
R8:<L17_R5:L15>=
R10:<L20_R8:L1>=w/charged;
---

-Fail() 's are ignored.
that's good.

==#
