utils.jl:function renamevarinlit(vars, lit)
utils.jl:function gelit(var1,L1,var2,L2)
utils.jl:function sortcls(vars, cls)
utils.jl:function adjustcano(cano)
utils.jl:function readclausefromfile(fname)
utils.jl:function readkpclausefromfile(fname)
utils.jl:function printcnf(fname)
utils.jl:function readcore(fname, cid=1)
utils.jl:function readcoredir(dirname)
utils.jl:function ltid(id1::String, id2::String) 
utils.jl:function ltid(id1::Symbol, id2::Symbol) 
primitives.jl:function isevar(sym::Symbol, vars::Vlist)
primitives.jl:function isground(vars::Vlist, tm::Number)
primitives.jl:function isground(vars::Vlist, tm::String)
primitives.jl:function isground(vars::Vlist, tm::Char)
primitives.jl:function isground(vars::Vlist, tm::Symbol)
primitives.jl:function isground(vars::Vlist, tm::Expr)
primitives.jl:function isground(vars::Vlist, tms::Array{Expr,1})
primitives.jl:function signof(e::Expr)
primitives.jl:function psymof(e::Expr)
primitives.jl:function lsymof(e::Expr)
primitives.jl:function argsof(e::Expr)
primitives.jl:function compsign(pn::Symbol)
primitives.jl:function complsym(lsym)
common.jl:function newvar(xid, var) 
common.jl:function newvarlist(xid, varlist)
common.jl:function rename_term(xid, vars, term::Term)
common.jl:function rename_lid(rid, lid, core)
common.jl:function rename_lids(rid, lids, core)
common.jl:function fitting_vars_term(vars, term)
common.jl:function fitting_vars_args(vars, args)
common.jl:function fitting_vars_lit(vars, lit)
common.jl:function leval(lit)
common.jl:function evaluate_literals(lids, lits)
common.jl:function lsymof(lid, core)
common.jl:function litis(sign, psym, lid, core)
common.jl:function oppositof(sign, psym, core)
common.jl:function templateof(sign, psym, core)
common.jl:function alltemplateof(core)
common.jl:function prod(tmpl1, tmpl2)
common.jl:function prodm(tmpls)
common.jl:function rotate(lids, i=0)
common.jl:function dostepagoal(goal, core)
common.jl:function dostep1goals(goals, core)
common.jl:function dostepagoal1(goal, core)
common.jl:function dostepgoals1(goals, core)
common.jl:function contradictionsof(core)
common.jl:function pairwiseeq(d1,d2)
common.jl:function findrepeat(proof)
common.jl:function proofstep(cid, core)
common.jl:function prooftree(cid, core)
common.jl:function isrepeatproof(cid, core)
subst.jl:function apply(vars::Vlist, sym::Number, subst::Tlist)
subst.jl:function apply(vars::Vlist, sym::Symbol, subst::Tlist)
subst.jl:function apply(vars::Vlist, subst1::Tlist, subst2::Tlist)
subst.jl:function apply(vars::Vlist, term::Expr, subst::Tlist)
subst.jl:function apply2(vars::Vlist, σ1::Tlist, σ2::Tlist)
unifybase.jl:# common functions for unify on dvc or naive
unifybase.jl:function putasubst(vars::Vlist, vt::Symbol, tm::Term, subst::Tlist)
unifybase.jl:function loopcheck(vt::Symbol, et::Number; istop=false)::Bool
unifybase.jl:function loopcheck(vt::Symbol, et::Symbol; istop=false)::Bool
unifybase.jl:function loopcheck(vt::Symbol, et::Expr; istop=true)::Bool
unifybase.jl:function maketlist(vars::Vlist, t1::Symbol, t2::Symbol)::Tlist
unifybase.jl:function putarray(tlist::Array, ix::Number, t::Any)
unifybase.jl:function vindex(vars::Vlist, v::Symbol)
unify.jl:function unify0(vars::Vlist, t1::Number, t2::Number)
unify.jl:function unify0(vars::Vlist, t1::Number, t2::Expr)
unify.jl:function unify0(vars::Vlist, t1::Expr, t2::Number)
unify.jl:function unify0(vars::Vlist, t1::Number, t2::Symbol)
unify.jl:function unify0(vars::Vlist, t1::Symbol, t2::Number)
unify.jl:function unify0(vars::Vlist, t1::Symbol, t2::Symbol)
unify.jl:function unify0(vars::Vlist, t1::Symbol, t2::Expr)
unify.jl:function unify0(vars::Vlist, t1::Expr, t2::Symbol)
unify.jl:function unify0(vars::Vlist, t1::Expr, t2::Expr)
unify.jl:function unify1(vars::Vlist, t1::Number, t2::Number, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Expr, t2::Number, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Number, t2::Expr, subst::Tlist)
unify.jl:function putsubst(vars, v::Symbol, t::Any, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Symbol, t2::Number, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Number, t2::Symbol, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Symbol, t2::Symbol, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Symbol, t2::Expr, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Expr, t2::Symbol, subst::Tlist)
unify.jl:function unify1(vars::Vlist, t1::Expr, t2::Expr, subst::Tlist)
unify.jl:function loopcheck_sigma(vars::Vlist, subst::Tlist)
unify.jl:function fp_subst(vars::Vlist, subst::Tlist)
unify.jl:function fp_subst2(vars::Vlist, subst::Tlist)
unify.jl:function unify(vars::Vlist, t1::Number, t2::Number)
unify.jl:function unify(vars::Vlist, t1::Number, t2::Symbol)
unify.jl:function unify(vars::Vlist, t1::Symbol, t2::Number)
unify.jl:function unify(vars::Vlist, t1::Symbol, t2::Symbol)
unify.jl:function unify(vars::Vlist, t1::Number, t2::Expr)
unify.jl:function unify(vars::Vlist, t1::Symbol, t2::Expr)
unify.jl:function unify(vars::Vlist, t1::Expr, t2::Number)
unify.jl:function unify(vars::Vlist, t1::Expr, t2::Symbol)
unify.jl:function unify(vars::Vlist, t1::Expr, t2::Expr)
unify.jl:function unify(vars::Vlist, t1::Array, t2::Array)
reso.jl:function genvars(vars::Vlist)::Vlist
reso.jl:function rename(vars, C::Clause, nvar)::Clause
reso.jl:function resolution(vars::Vlist, c1::Clause, c2::Clause, i1::Int, i2::Int)
reso.jl:function resolution(var1::Vlist, c1::Clause, i1::Int, var2::Vlist, c2::Clause, i2::Int)
reso.jl:function resolution(c1::CForm, i1::Int, c2::CForm,i2::Int)
reso.jl:function reduction(vars::Vlist, c1::Clause, i1::Int)
reso.jl:function reduction(c1::CForm, i1::Int)
reso.jl:function satisfiable(vars::Vlist, c1::Clause)
reso.jl:function satisfiable(c1::CForm)
reso.jl:function readablevars(n::Int)
reso.jl:function containvar(vars::Vlist, form::Expr)
reso.jl:function containvar(vars::Vlist, cls::Clause)
reso.jl:function fitvars(vars::Vlist, cls::Clause, sub::Tlist)
reso.jl:function renamereadable(clause::CForm, sub::Tlist)
reso.jl:function equalclause(clause1::CForm, clause2::CForm)
reso.jl:function reducesub(vars::Vlist, fvars::Vlist, sub::Tlist)
newcore.jl:function stringtoclause(cid, cls)
newcore.jl:function cform2ofclause(clss, initn=1)
newcore.jl:function numberingliterals(ncls, lno0, ldb, lcmap, clmap, allpsym)
newcore.jl:function createLDB(clss)
newcore.jl:function vform2ofclause(cdb)
newcore.jl:function createcore(name, clss, proc, cid, cano)
newcore.jl:function proofcof(rid, core)
newcore.jl:function newlid(xid, lid)
newcore.jl:function newrid(core) 
newcore.jl:function origof(xid)
newcore.jl:function origtermof(term)
newcore.jl:function varsof(cid, core)
newcore.jl:function cvarsof(lid, core)
newcore.jl:function lvarsof(lid, core)
newcore.jl:function bodyof(cid, core)
newcore.jl:function clause2of(cid, core)
newcore.jl:function lidsof(cid, core)
newcore.jl:function cidof(lid, core)
newcore.jl:function literalof(lid, core)
newcore.jl:function literalsof(lids, core)
newcore.jl:function evalproc(proc)
newcore.jl:function evalcore(core)
newcore.jl:function analyze_term(vars, term)
newcore.jl:function analyze_args(vars, args)
newcore.jl:function analyze_lit(vars, atom)
newcore.jl:function analyze_sym(core)
newcore.jl:function resolution(lid1, lid2, core)
coreprint.jl:function printterm(tm)
coreprint.jl:function print_termlist(tl)
coreprint.jl:function printliteral(lit)
coreprint.jl:function printlid(lid, core)
coreprint.jl:function printlids(lids, core)
coreprint.jl:function printbody(cls)
coreprint.jl:function printvars(vars)
coreprint.jl:function printclause(cid, core)
coreprint.jl:function printclauses(core)
coreprint.jl:function printcdb(cdb) 
coreprint.jl:function printldb(ldb)
coreprint.jl:function printamap(amap)
coreprint.jl:function printstep(step)
coreprint.jl:function printproof(proof::Dict)
coreprint.jl:function printproof(core::CORE)
coreprint.jl:function printaproof0(rid, core)
coreprint.jl:function printns(shift)
coreprint.jl:function printaproof1(rid, core, shift=0)
coreprint.jl:function proofdepth(rid, core)
coreprint.jl:function proofdepths(core)
coreprint.jl:function printcontradictions(core)
coreprint.jl:function printproofs0(core)
coreprint.jl:function printproofs1(core)
coreprint.jl:function printmgu0(ovars, sigma, orig)
coreprint.jl:function printmgu(rid, core, orig)
coreprint.jl:function printmgus(core, orig=false)
coreprint.jl:function printproc(proc)
coreprint.jl:function printcano(cano)
coreprint.jl:function printcore(core, showinfo=false)
coreprint.jl:function printliteral(lid, core)
coreprint.jl:function printlid0(lid, core)
coreprint.jl:function printlids0(lids, core)
coreprint.jl:function printtemplate0(key, eq, core)
coreprint.jl:function printtemplates0(eqs, core)
coreprint.jl:function printtemplate1(key, eq, core)
coreprint.jl:function printtemplates1(eqs,core)
coreprint.jl:function printgoal(goal, core)
coreprint.jl:function printgoals(goals, core)
coreprint.jl:function print_list(set)
coreprint.jl:function print_set(set)
coreprint.jl:function print_coreinfo(core)
coreprint.jl:function printtracestep(vars, step)
coreprint.jl:function printprooftrace(rid, vars, proof)
coreprint.jl:function printtrace(rid, vars, core)
coreprint.jl:function printatrace1(rid, vars, core)
coreprint.jl:function traceofaproof(rid, vars, core)
coreprint.jl:function getBigvars(ci)
coreprint.jl:function getVARS(core)
coreprint.jl:function traceof(core)
corestring.jl:function stringcore(core)::String
corestring.jl:function stringcanodef(canodef::Dict)::String
corestring.jl:function stringcano(cano)::String
corestring.jl:function stringclauses(core)::String
corestring.jl:function stringclause(cid, core)::String
corestring.jl:function stringarray(arr)::String
corestring.jl:function stringlids(lids, core)::String
corestring.jl:function stringlid(lid, core)::String
corestring.jl:function stringliteral(lit)::String
dvcreso.jl:function rename_clause(xid, vars, body)
dvcreso.jl:function entrylit(rid, nlid, lid, core)
dvcreso.jl:function rename_clause(xid, vars, body)
dvcreso.jl:function entrylit(rid, nlid, lid, core)
dvcreso.jl:function fitting_vars(vars, lits, core)
dvcreso.jl:function dvc_resolution(l1,l2,core)
dvcreso.jl:function psymof(lid, core)
dvcreso.jl:function atomof(lid, core)
dvcreso.jl:function applytemp(lid, core)
dvcreso.jl:function simpleprovercore(cdx, steplimit, contralimit, reslimit)
dvcreso.jl:function simpleprover(cnf, steplimit, contralimit, reslimit=100)
analyzer.jl:function pairing(plist, nlist)
analyzer.jl:function pairmaker(core)
analyzer.jl:function resolvepair(pn, core)
analyzer.jl:function pairmakefromcore(path::String)
analyzer.jl:function pairmakefromcore(core::CORE)
analyzer.jl:function printvm(vs, ts)
analyzer.jl:function printlform2(lfm)
analyzer.jl:function printpair(pair, core)
analyzer.jl:function printpvms(pvms, core)
analyzer.jl:function emptylsyms(core::CORE)
analyzer.jl:function reachable(lsym, core::CORE)
repl.jl:function usage(args, core)
repl.jl:function help()
repl.jl:function separate(str)
repl.jl:function proofsfn(args, cores)
repl.jl:function mgusfn(args, cores)
repl.jl:function provefn(args, cores)
repl.jl:function lsfn(args, cores)
repl.jl:function corefn(args, cores)
repl.jl:# direct called functions
repl.jl:function prcore(args, cores)
repl.jl:function cores(args, cores)
repl.jl:function repl(io=stdin)
repl.jl:#function repl()
merge.jl:function merge(vars::Vlist, t1::Symbol, t2::Symbol)
merge.jl:function merge(vars::Vlist, sub1::Tlist, sub2::Tlist)
parser.jl:function breaksym(str)
parser.jl:function findsym(str, six)
parser.jl:function tokenizer(str)
parser.jl:function parser(str)
