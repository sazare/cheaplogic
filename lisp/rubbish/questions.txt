1. 代入　直列と並列
　直列代入σに対して、並列代入σ'が存在して e・σ ≡ e●σ'となる。

2. Σから導出された矛盾Cについて、そのpcodeとp2codeが違うものが存在する。
  pcode πをもつ2つのclause C1とC2について、π2(C1) ≠ π2(C2)となる。ものが存在する。
　Σ → C1かつΣ ⇒ C2で、(π(C1) = π(C2)) ∧ (π2(C1) ≠ π2(C2))、C1≠C2

　矛盾のpcodeであることが重要な気がする。

　p2codeは単にresolveされるpairの集合なので、あるClause Cについて、Cの証明の命題レベルの情報であるpcodeは、Cから続く証明の構造と同じように考えられて、見通しがよいかも。
　つまり、C=(L1,L2,L3)ならば、Cから発生する[]には{(L1:?),(L2:?),(L3:?)}というp2codeの部分が含まれる。
　それらの?を含むclauseによってp2codeが膨れることはあるので、Cのp2codeがすべてを決定するわけではない。
　ただ、p2codeはresolve情報によりすぎていて、pcodeのほうが柔軟であるような気もする。よくわからん。

3. ある表現Eは、そこに含まれる記号の一部を「変数」だと見なすことで代入が発生できる。
　 「変数」が先にあって、それを使って表現を作るのではなく、表現に使われている記号を「変数」だと指定するという操作が、何をひきおこせるか。
　　(P a b c) の aとcを変数とみるか、bとcを変数とみるか。というような変数指定による可能性があると思う。


4. 一般化
　何に着目して一般化するか
　選択肢はいろいろあるので、その中のどれを選ぶか?
　個別の述語とかliteralとかclause単体を一般化するわけでなく、Σ全体で一般化する。
　　Σ1 Σ2 Σ3 ...

　一般化は、groundから変数表現にするということか?
　公理系をかえていくということではないのか

5. 成長サイクルでの論理の適用
　refer repository sazare/cycle


　
