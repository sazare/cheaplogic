



; for english knowledge
(defparameter fwname "kqc/3doors/3d-knowledge.wff")
(defparameter fkname "kqc/3doors/3d-knowledge.kqc")

; for japanese knowlegd
(defparameter fwname "kqc/3doors/j3d-knowledge.wff")
(defparameter fkname "kqc/3doors/j3d-knowledge.kqc")

; more free
(defparameter fwname "kqc/3doors/j3d-kb-extend.wff")
(defparameter fkname "kqc/3doors/j3d-kb-extend.kqc")

(load "load-rubbish.lisp")
(load "rubbish-wff.lisp")

(defparameter wff (readafile  fwname))
(defparameter cls (eqvs2cs wff))
(write-kqc fkname cls)

;; check kqc
(load "load-rubbish.lisp")
(readekqc fkname)
(dump-clausex)
(print-clauses *clist*)

;; fact reduction
(load "load-rubbish.lisp")
(load "rubbish-confact.lisp")
(readekqc fkname)
(init-kb)

(defparameter fc1 (make-clause '(() (+ 大きい))))
(defparameter fc2 (make-clause '(() (+ 大きい耳))))
(defparameter fc3 (make-clause '(() (+ 長い鼻))))
(defparameter fc4 (make-clause '(() (+ 動物))))

; (setq f11 (car (bodyof fc1)))
; (resolve-id 'l1-1 f11)
; (resolve-id 'l1-2 f11)
; (reduce-clause fc1 'c1)

(defparameter kb1 (reduce-kb fc1 *kb*))
(findfact kb1)

(defparameter kb2 (reduce-kb fc2  kb1))
(findfact kb2)

(defparameter kb3 (reduce-kb fc3  kb2))
(findfact kb3)

(defparameter kb4 (reduce-kb fc4  kb3))
(findfact kb4)

* 全部の条件がきえてunitにならないと答えとみなされない??




;;; image of proceduer
; 1st try
(factis (+ OOKII))
(factis (+ OOKIIMIMI))
(factis (+ NAGAIHANA))

;; answerは何か
・unit clauseになった
・述語に、対象と性質の二種類があるのかな
　対象は答えになる・・・というような

・4つ以上あっても、推論で消せるとか

対象に関する述語は What(うさぎ)みたいに書く
性質はIs(大きい)と書く。

この区別は必要か??

