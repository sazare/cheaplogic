


; sample
(defparameter fwname "kqc/3doors/sample.wff")
(defparameter fkname "kqc/3doors/sample.kqc")

; for english knowledge
(defparameter fwname "kqc/3doors/3d-knowledge.wff")
(defparameter fkname "kqc/3doors/3d-knowledge.kqc")

; for japanese knowlegd
(defparameter fwname "kqc/3doors/j3d-knowledge.wff")
(defparameter fkname "kqc/3doors/j3d-knowledge.kqc")


; more free
(defparameter fwname "kqc/3doors/j3d-kb-extend.wff")
(defparameter fkname "kqc/3doors/j3d-kb-extend.kqc")

; use What and Is 
(defparameter fwname "kqc/3doors/j3d-wis.wff")
(defparameter fkname "kqc/3doors/j3d-wis.kqc")

; use Is and Is 
(defparameter fwname "kqc/3doors/j3d-isis.wff")
(defparameter fkname "kqc/3doors/j3d-isis.kqc")

; use What, Is, Has
(defparameter fwname "kqc/3doors/j3d-do.wff")
(defparameter fkname "kqc/3doors/j3d-do.kqc")

; use What, Is, Has with var x
(defparameter fwname "kqc/3doors/j3d-do2.wff")
(defparameter fkname "kqc/3doors/j3d-do2.kqc")

;;;;
(load "load-rubbish.lisp")
(load "rubbish-wff.lisp")

(defparameter wff (readafile  fwname))
(defparameter cls (eqvs2cs wff))
(write-kqc fkname cls)

;; check kqc
(load "load-rubbish.lisp")
(readekqc fkname)
(dump-clausex)
(print-clauses *clist*)

;; fact reduction
(load "load-rubbish.lisp")
(load "rubbish-confact.lisp")

(readekqc fkname)
(init-kb)

; case what 
(defparameter fc1 (make-clause '(() (+ 大きい))))
(defparameter fc2 (make-clause '(() (+ 大きい耳))))
(defparameter fc3 (make-clause '(() (+ 長い鼻))))
(defparameter fc4 (make-clause '(() (+ 動物))))

;; case what is  and case is is
(defparameter fc1 (make-clause '(() (+ Is 大きい))))
(defparameter fc2 (make-clause '(() (+ Is 大きい耳))))
(defparameter fc3 (make-clause '(() (+ Is 長い鼻))))
(defparameter fc4 (make-clause '(() (+ Is 動物))))

;; case what do
(defparameter fc1 (make-clause '(() (+ Is 大きい))))
(defparameter fc2 (make-clause '(() (+ Has 大きい耳))))
(defparameter fc3 (make-clause '(() (+ Has 長い鼻))))
(defparameter fc4 (make-clause '(() (+ Is 動物))))

;; case what do with x
(defparameter fc1 (make-clause '(() (+ Is a 大きい))))
(defparameter fc2 (make-clause '(() (+ Has a 大きい耳))))
(defparameter fc3 (make-clause '(() (+ Has a 長い鼻))))
(defparameter fc4 (make-clause '(() (+ Is a 動物))))


; test
; (setq f11 (car (bodyof fc1)))
; (resolve-id 'l1-1 f11)
; (resolve-id 'l1-2 f11)
; (reduce-clause fc1 'c1)

(defparameter kb1 (reduce-kb fc1 *kb*))
(findfact kb1)

(defparameter kb2 (reduce-kb fc2  kb1))
(findfact kb2)

(defparameter kb3 (reduce-kb fc3  kb2))
(findfact kb3)

(defparameter kb4 (reduce-kb fc4  kb3))
(findfact kb4)

(print-proof0 (car kb4))

* 全部の条件がきえてunitにならないと答えとみなされない問題??


====
実行結果
* (load "load-rubbish.lisp")
(load "rubbish-confact.lisp")
(defparameter fkname "kqc/3doors/j3d-knowledge.kqc")

* (readekqc fkname)
kqc reading: kqc/3doors/j3d-knowledge.kqc
.............................................................................
(C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15 C16 C17 C18 C19 C20 C21 C22
 C23 C24 C25 C26 C27 C28 C29 C30 C31 C32 C33 C34 C35 C36 C37 C38 C39 C40 C41
 C42 C43 C44 C45 C46 C47 C48 C49 C50 C51 C52 C53 C54 C55 C56 C57 C58 C59 C60
 C61 C62 C63 C64 C65 C66 C67 C68 C69 C70 C71 C72 C73 C74 C75 C76 C77)
* (init-kb)
(C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15 C16 C17 C18 C19 C20 C21 C22
 C23 C24 C25 C26 C27 C28 C29 C30 C31 C32 C33 C34 C35 C36 C37 C38 C39 C40 C41
 C42 C43 C44 C45 C46 C47 C48 C49 C50 C51 C52 C53 C54 C55 C56 C57 C58 C59 C60
 C61 C62 C63 C64 C65 C66 C67 C68 C69 C70 C71 C72 C73 C74 C75 C76 C77)
* (defparameter fc1 (make-clause '(() (+ 大きい))))
FC1
* (defparameter fc2 (make-clause '(() (+ 大きい耳))))
FC2
* (defparameter fc3 (make-clause '(() (+ 長い鼻))))
FC3
* (defparameter fc4 (make-clause '(() (+ 動物))))
FC4
* (defparameter kb1 (onfact-kb fc1 *kb*))
KB1
* (findfact kb1)
NIL
*
(defparameter kb2 (onfact-kb fc2  kb1))
KB2
* (findfact kb2)
NIL
*
(defparameter kb3 (onfact-kb fc3  kb2))
KB3
* (findfact kb3)
NIL
*
(defparameter kb4 (onfact-kb fc4  kb3))
KB4
* (findfact kb4)
(C88)
=======

now reduce-kb call onfact-kb and onfalse-kb

;;; image of proceduer
; 1st try
(factis (+ OOKII))
(factis (+ OOKIIMIMI))
(factis (+ NAGAIHANA))

;; answerは何か
・unit clauseになった
・述語に、対象と性質の二種類があるのかな
　対象は答えになる・・・というような

・4つ以上あっても、推論で消せるとか

対象に関する述語は What(うさぎ)みたいに書く
性質はIs(大きい)と書く。

この区別は必要か??

