*clist*
(gatercontra *clist*) => (consists contras)
(proofof cid) .. list-mguから呼ばれる
(list-mgu cid)
(list-proof0 cid)

(pinfof cid)
(pcode cid)
(spcode cid)
(ccode cid)

(print-clauses *clist*)
(print-clause0 cid)
(print-clause cid)    ..0とどこが違うのか?
(print-clausex *clist*)

(print-proof0 cid)
(list-proof0 cid) リスト構造で証明の簡略形をかえす

----
(summary0 t/nil)

(show-parameter0 t/nil)

 (time-current-secs)

get-internal-run-time
internal-time-units-per-second
(local-time:now)   -- starttime

=====
(step-solver goal) 重要そう。proverの制御しているぽい

====
lower level
(gather-properties atom)
(gather-atominfo atomlist)

(symbol-plist 'atom)

======

(analyze-pcode)   []のみのpcodeで分析。summaryつき。
(analyze-pcode0 cids)　任意のclauseリストで分析。省略時は*clist*。summary なし。
(analyze-p2code)  []のみのp2codeで分析。summaryつき。
(analyze-p2code0)　任意のclauseリストでp2code分析。省略時は*clist*。summary なし。

reportcはanalyze結果をすこし見やすくする

(reportc (analyze-pcode))　
(reportc (analyze-p2code))
