(step-solver (goal)) ... goalに対する1stepのprover処理

(prover-gtrail (goals)) ... goals全部に対するstep-solver

(play-prover-gtrail (goal kqcfile)) ... kqc読み込んだりlogの準備したりしてprover-gtrail

----
(lscova)  contradictionのリストとvalidのリストのペアを返す

----
(gatercontra *clist*) => (consists contras)
(proofof cid) .. list-mguから呼ばれる
(list-mgu cid) ... cidのproofのpairとそのmguを返す
(list-proof0 cid) ... 証明をlistで返す

(pinfof cid) ... cidの証明に出現するinput lid
(pcode cid) ... pinfoをsortしたもの
(spcode cid) ... pcodeをstringにしたもの
(ccode cid) ... cidのbodyをinput lidにしたもの

(print-clauses [cids]) ... cidsのprint. cidsがなければ *clist*
(print-clause0 cid) ... cidのprint
(print-clause cid)    ..0とどこが違うのか?
(print-clausex [cids]) ... cidsのclauseをprint。ただし、literalはlid。cidsがなければ*clist*

(print-proof0 cid) ... cidのproofをprint
(list-proof0 cid) ... cidのproofをリスト構造をかえす

----
(summary0 out) ... prover-gtrail実行結果のsummaryをstream outに出力する
(show-parameter0 out) ... prover-gtrailの実行時のパラメータをoutに出力する。

=====
(step-solver goal) proverの1ステップの実行。
======

(analyze-pcode)   []のみのpcodeで分析。summaryつき。
(analyze-pcode0 cids)　任意のclauseリストで分析。省略時は*clist*。summary なし。
(analyze-p2code)  []のみのp2codeで分析。summaryつき。
(analyze-p2code0)　任意のclauseリストでp2code分析。省略時は*clist*。summary なし。

reportcはanalyze結果をすこし見やすくする

(reportc (analyze-pcode))　 ... 今の[]のpcodeを計算して各pcodeのclause数
(reportc (analyze-p2code))　... 今の[]のpcodeを計算して各p2codeのclause数


(analyze-pcode0 cids)   ... cidsに対してpcodeを計算して同じpcodeのclause数を示す
(analyze-p2code00 cids)  ... cidsに対してp2codeを計算して同じpcodeのclause数を示す


====
[lower level]
(gather-properties atom)  ... atomのplist。symbol-plistと同じ。
(gather-atominfo atomlist) ... atomlistのそれぞれのplistとかbindしている値と

(symbol-plist atom) ... commonlispの、atomのplistを返す


[参考 sbclのapiかな]
(time-current-secs) ... 今の秒数
(get-internal-run-time) 
internal-time-units-per-second ... 1秒あたりのtime unit数
(local-time:now)   -- starttimeで使用。今の時刻の表示。local-timeは別package。

