; unification anyway

;; x = <e1:e2>
;((e1 e2 x)(+ D e1 e2 x))

; ok
; (1 (u) (- D a a u)(- Const a))
; ok
;(1 (u) (- D a a u))

;; twin nconj find the trueth?
;; if this, u may be anything. 
;(1 (u) (+ D b a u)(- Const a)(- Const b))
;; no □, ∵ a,bは(+ Const ?)がないから
;(1 (u) (- D b a u))
;; this must be □. it means fail of unify.
;(1 (u) (+ D b a u))

;; cant
; no cは任意のConstでOK
(1 (c x y u) (+ D c (f (g y) x) u)(- Const c))

;特定の定数a,bについての問い合わせの場合。
;(1 (x u) (+ D a (f (g b) x) u))

;; this is ok or not
;; u is ∅ 
;; (extract-mgu 'c35 '(c1) '(x.148)) => (:TUPLE ∅)
;(1 (u) (- D (f a b) (f a b) u))

;; u is mgu
;; u is (x b)?
;; this require induction of Expr on D
;(1 (u) (- D (g a)(g x) u))
;(1 (u) (- D (g x)(g b) u))
;(1 (u) (- D (f a x) (f a b) u))
;(1 (u) (- D (f (g x) y)(f x b) u))
;(1 (u) (- D (f (g x) b)(f x b) u))

;; -D is fail, +D contra
;(1 (u) (- D (f (g x) b)(f x (g b)) u))
;; +D makes no contra. -D not connect +D chain
;; 
;(1 (u) (+ D (f (g x) b)(f y (g b)) u))

;; these cannot remove c1 = c2 or a = b. these are NO.
;; but this doesn't cause □ something like this
;((z)(- D a b z)(- Const a)(- Const b))
;((c1 c2 z)(- D c1 c2 z) (- Const c1)(- Const c2))


;; NOGOOD this is true when x ≠ y. but how can i write so?
;((x y z)(- D x y z)(- Const x)(- Cosnt y))


(readefile "kqc/explore/const/unifydef.kqc")

