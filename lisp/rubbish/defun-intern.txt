=======
isterm (e)
isterm* (e)
basevar (v)
basesof (vs)
newvar (v)
newvars (vs) 
make-lid (cid n)
lpairof (lid)
lid> (l1 l2)
make-lids(cid lits)
make-lids-from-lids (cid lids)
setlid (lid cid plid lit)
cidfy (name) 
make-cid (n)
cnumof (cid)
add-cid (n)
new-cid ()
clearbase () とくになくていいかも。clear-all-atomsがよい
rootof (cid)
setcid (cid name vars body)


varsof (cid)
bodyof (cid)
subsof (cid) not used
nameof (cid)
lidof (cid i)
rawlits (lids)
rawclause (cid)
alllids (cids)  cidsのlidのすべて
lidsof (cid &rest ns) cidのlids
choose (ns os)
iscontradiction (cid)

lsymof (lid)
oppo (sign)
soppo (sign)
signof (lsym)
psymof (lsym)
oppolsymof (lsym)
vrootof (var)
isinputlid (lid)
illist (llist)
isWFF-literal (lid)
check-literals (&optional (lids *llist*))

;init-kb ()  ;rubbish-confact.lisp --- 検討
;onfact-clause (fcid cid)
;onfact-kb (fcid kb)
;onfalse-clause (fcid cid)
;onfalse-kb (fcid kb)
;reduce-kb (fcid kb)
;findfact (kb)


;is-unique-dom (vars x y) ;; rubbish-dom.lisp -- 未使用
;is-uniq (x y) ; x y are constants


fsetplist (atm plist)
fsetatom (atm bind plist)
remove-props (atm)
remove-prop (atm pn)
remove-atom (atm)
remove-atomlist (alist)
nspace (&optional (n 0))
expf (fn n)  ; expf: Fun x Number -> Fun
uniq (ds)
rub-gensym (id)
rub-gensym (id)
warn-syntax (ls)

logstart ()
logstop ()
rubbish-log (&rest message)

clausesof (&optional (cids *clist*))
clauseof (cid)


lscova ()
entry-proof (cid rule vars sigma conflicts)
proofof (cid)
ruleof (cid)
sigof (cid)
rpairof (cid)
truesof (cid)
code-of-rule (code)
invariantof (cid)
when-finish-p () t)
when-finish-p () nil)
select-goal (gs)
gathercontra (clist)
constract-lid (cid)
findoppos (goal)
step-solver (goal) 
show-parameter0 (out)
show-parameter (time-start)
quit-contra (message time-start contras valids)
summary0 (out)
summary (time-start)
prover-gtrail (goals)
cidlistfy (namelist)
start-prover-gtrail (kqcfile)
play-prover-gtrail (goal kqcfile)
gather-properties (atm)
gather-atominfo (atmlist)
gather-atoms (alist)
gather-allinf ()
save-rubbish (fname)
allatomof (alist)
deploy-atoms (allinf)
load-rubbish (fname)
clear-all-atoms()
clear-atoms (atomlist)
clear-atom (atm)
remove-plist-of-atom (atm)
remove-lids (lids)
remove-lsym (lid)
remove-cid (cid)
pushlsym (lid)
make-lsymlist (llist)
psymoflid (lid)
make-psymlist (llist)
find-oppolids (lid)
ccode (cid)
sccode (cid)
olid> (ll rr)
canonic (cid)
make-spcode (lid1 lid2)
make-pcode (lid1 lid2)
make-pinfo (lid1 lid2)
pcode-reduced (cid trues)



addnewpcode (cid pcpool)
checkpc (cid pcpool)
checkpc2 (llid rlid pcpool)
make-pcpool (clist)
isunitclause (cid)
mayrefused (gcid conid)
psymofunitclause (cid)
directconfuse (gcid conid)
list-step (cid)
remove-elem (xl e)
remove-nth (xl n)
separate (n xl)
random-sort (xl)
funification (vs e1 e2) (funcall *sunification* vs e1 e2))
fsubst (vs ex es) (funcall *ssubst* vs ex es))
fsubsub (vs e1 e2) (funcall *ssubsub* vs e1 e2))
atomicof (lit) 
shrinkvs (vs sig)
resolve (vs1 l1 rem1 vs2 l2 rem2)
isolatevs (vs c1)
list-remain (e es)
remof (lid)
latomicof (lid)
entry-clause (lid1 lid2 vs sig remid remlit*)
existpcode (lid1 lid2)
resolve-id (lid1 lid2)
peval-id (lid)
map-to-semantx (lid)
apply-semantx-id (cid)
make-valid-clause (cid tlids flids olids)
make-clause-by-reduced (cid flids olids) ;; flids is not ()
reduce-by-semantx (cid)
isvalid (cid)
reset-stat ()
uniq-pcodes (&optional (cids *clist*))
find-cid-by-pcode (pcode &optional (cids *clist*))

uniq-p2codes (&optional (cids *clist*))
find-cid-by-p2code (p2code &optional (cids *clist*))

p2top (p2c)
p2top* (cb2)

test-graph (mc kqcfile &optional (goal '(C1)))

isprefix (prefix var)
isprefixs (pxs vs)

intend-ru-sameterm (note vars eterm term)
intend-ru-sameterms (note vars ets ts)
intend-ru-samelitlit (note vars elit lit)
intend-ru-samelit (note vars elit lid)
intend-ru-clause (note cid body &key name vars)
intend-ru-literal (note vars lit lid &key olid plid cid)
intend-ru-proof (note cid rule vars sig llid rlid)

isvar (vars sym)
vof (s) (car s))
exof (s) (cdr s))
issym (e) (atom e))
sigma (v e) (cons v e))
fof (e) (car e))
e*of (e) (cdr e))
form (f as) (cons f as))
subst1 (e v1 e1)
subst1* (e* v1 e1)
substs (e ss) 
substv1 (v v1 e1)
substv (v s)
substvs (v ss)
substvs* (vs ss) 
subsubs1 (s v1 e1)
subsubs1h (s v1 e1 has)
subsubs1w (s v1 e1)
subsubs1w0 (s v1 e1 as)
subsubs (s1 s2)
normalf (e v1 e1)
putpnot (vs s v1 e1 &optional (fn #'normalf))
substp1 (vs s v1 e1)
substp (vs ex es)
subsubp1 (vs s1 v1 s2)
subsubp (vs s1 s2)
s2p (vs ss)
p2s (vs es)
disagree (vs e1 e2 se fn)
disag (vs e1 e2 m fn)
disag* (vs es1 es2 m fn)
showit (vs e1 e2 m)
collect (vs e1 e2 m)
insidep (v e)
insidep0 (v e)
insidep0* (v e*)
unifics (vs d1 d2 m)
unifics* (vs e1* e2* m)
makesubsubs (vs s v e)
unifys (vs e1 e2)
unifications (vs e1 e2)
unifysp (vs e1 e2)
unificationsp (vs e1 e2)
unificp (vs d1 d2 m)
unificp* (vs e1* e2* m)
makesubsubp (vs s v e)
unifyp (vs e1 e2)
unificationp (vs e1 e2)
neglit (lit)
negconj (conjs)
make-newclause (vars lits)
eqv2c (wff)
eqvs2cs (wffs)
