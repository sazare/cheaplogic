complex goal examples(graph5??)

* 2clauses goalは、単に A∨Bの否定なので、2つのgoalそれぞれの証明を求めているだけ。

手順
(require :gtrail)
(in-package :rubbish)

(setq *enable-semantics* nil)
(setq *max-steps* 10)
(setq *max-contradictions* 20)

(play-prover-gtrail '(1)  "kqc/path/graph501.kqc")
(play-prover-gtrail '(1 2) "kqc/path/graph502.kqc")

(play-prover-gtrail '(1 2) "kqc/path/graph504.kqc")
(play-prover-gtrail '(1 2) "kqc/path/graph505.kqc")
(play-prover-gtrail '(1 2) "kqc/path/graph506.kqc")


(reportc (analyze-pcode))
(reportc (analyze-p2code))

としてpcodeの分析結果を見るようにした。





RUBBISH(5): (play-prover-gtrail '(1 2) "kqc/path/graph502.kqc")
kqc reading: kqc/path/graph502.kqc
......

start-time: 2023-01-30T20:01:46.602885+09:00

  ### PARAMETERS ###
  *max-clauses*        = 1000
  *max-contradictions* = 10
  *max-trials*         = 100
  *max-steps*          = 100
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

end-time: 2023-01-30T20:01:46.606857+09:00

finished. goallist is empty
contradictions=(C20 C21 C18 C19)
valids =NIL

#clauses = 10
#contras = 4
#valids = 0
#trials = 4
#max proof steps = 1
NIL

RUBBISH(6): (print-clauses)
C21: RESOLVENT = []
C20: RESOLVENT = []
C19: RESOLVENT = []
C18: RESOLVENT = []
C17: 17 NIL [((+ R (F B)))]
C16: 16 NIL [((+ R (F A)))]
C11: 11 NIL [((+ P B))]
C10: 10 NIL [((+ P A))]
C2: 2 (X.146) [((- R (F X.146)))]
C1: 1 (X.145) [((- P X.145))]
NIL
RUBBISH(7): (reportc (analyze-p2code))

kqc file             : kqc/path/graph502.kqc

  *max-clauses*        = 1000
  *max-contradictions* = 10
  *max-trials*         = 100
  *max-steps*          = 100
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

# of pcodes          : 4
1 ((L16-1 L2-1))
1 ((L17-1 L2-1))
1 ((L1-1 L10-1))
1 ((L1-1 L11-1))
NIL
RUBBISH(8): (reportc (analyze-pcode))

kqc file             : kqc/path/graph502.kqc

  *max-clauses*        = 1000
  *max-contradictions* = 10
  *max-trials*         = 100
  *max-steps*          = 100
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

# of pcodes          : 4
1 (L2-1 L16-1)
1 (L2-1 L17-1)
1 (L10-1 L1-1)
1 (L11-1 L1-1)
NIL


このように各goalがそれぞれ[]になればよいだけ
つながるようなkqcはかけるか

*graph503.kqc

(require :gtrail)
(in-package :rubbish)

(setq *enable-semantics* nil)
(setq *max-steps* 10)
(setq *max-contradictions* 20)

(play-prover-gtrail '(1 2) "kqc/path/graph503.kqc")


これは、C15でPとRをつないだもの。
ばらばらでも[]、C15でも[]がでるのはあたりまえか。

C15で変数を使っているから、これはfactではなくルールになる。
このルールがすべてのtermについて成り立つことを誰かが証明していなくてはならない。
証明でなく仮説だったら??



RUBBISH(6): (play-prover-gtrail '(1 2) "kqc/path/graph503.kqc")
kqc reading: kqc/path/graph503.kqc
.......


start-time: 2023-01-30T20:07:40.789578+09:00

  ### PARAMETERS ###
  *max-clauses*        = 1000
  *max-contradictions* = 20
  *max-trials*         = 100
  *max-steps*          = 10
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

end-time: 2023-01-30T20:07:40.796451+09:00

finished. goallist is empty
contradictions=(C15 C14 C11 C12 C8 C10)
valids =NIL

#clauses = 15
#contras = 6
#valids = 0
#trials = 8
#max proof steps = 2
NIL
RUBBISH(7): (print-clauses)
C15: RESOLVENT = []
C14: RESOLVENT = []
C13: RESOLVENT (X.153) [((+ P X.153))]
C12: RESOLVENT = []
C11: RESOLVENT = []
C10: RESOLVENT = []
C9: RESOLVENT (X.148) [((+ R (F X.148)))]
C8: RESOLVENT = []
C7: 7 NIL [((+ R (F B)))]
C6: 6 NIL [((+ R (F A)))]
C5: 5 (X.131) [((+ R (F X.131)) (+ P X.131))]
C4: 4 NIL [((+ P B))]
C3: 3 NIL [((+ P A))]
C2: 2 (Y.130) [((- R (F Y.130)))]
C1: 1 (X.129) [((- P X.129))]
NIL
RUBBISH(8):  (reportc (analyze-pcode))

kqc file             : kqc/path/graph503.kqc

  *max-clauses*        = 1000
  *max-contradictions* = 20
  *max-trials*         = 100
  *max-steps*          = 10
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

# of pcodes          : 5
2 (L5-2 L5-1 L2-1 L1-1)
1 (L7-1 L2-1)
1 (L6-1 L2-1)
1 (L3-1 L1-1)
1 (L4-1 L1-1)
NIL
RUBBISH(9):  (reportc (analyze-p2code))

kqc file             : kqc/path/graph503.kqc

  *max-clauses*        = 1000
  *max-contradictions* = 20
  *max-trials*         = 100
  *max-steps*          = 10
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

# of pcodes          : 5
2 ((L1-1 L5-2) (L2-1 L5-1))
1 ((L2-1 L7-1))
1 ((L2-1 L6-1))
1 ((L1-1 L3-1))
1 ((L1-1 L4-1))
NIL
RUBBISH(10):

つながるclauseがあれば両方のgoalが関係する
しかし、つながるclauseはfactではなく仮説である。


** 503での疑問点
nconjが1 -P(x)と2 -R(f(y))だということはconjは
∀x(P(x) ∧ R(f(x)))
である。
まず10,11や16,17はそれぞれこの1と2と[]になって2つの[]ができる。
これは真偽表ではF/TかT/Fのどちらかの場合、全体がFになるという場合である。

15はその両方のliteralが否定されたとき[]になる。真理表ならF/Fの場合に全体がFになるという場合である。
ここで拒否されるのは+R(f(x))∨+P(x)であり、変数xでliteralが繋がっている。この特殊性は、5からはでてこない。1と2それぞれのxは別のxである。

1-5-2からでる[]では1と2のxが同じ定数になる必要があるが、この制約は結果だけみてもわからない。

RUBBISH(10): (list-mgu 'c15)
((C15 (:RESOLUTION (X.153 X.129) (X.157 X.157) (L13-1 L1-1)))
 (C13 (:RESOLUTION (Y.130 X.131) (X.153 X.153) (L2-1 L5-1))))

これを見ると、

y.130 = x.135 =x.157 = x.129となり、c1とc2のxとyが同じであることがわかる。
この情報は、命題レベルでなく、mguレベルでわかる。

全情報はmguまでみなくてはならない。

★★
問題は、1,2の片方で[]が出てしまうことかも。
1と2が同時に消えなくては正解ではない。
そのとき、同じ値aとかbに対して
1,2が[]にならないといけないと思う。

書き方が悪いのだろうか。考え方が悪いのだろうか。

★複数goalはすべてが[]にならないといけない
そういう制御になっているか?


★★★要検討

[]をひとつ求めれば良いproverと違い、複数のproofを集めて分析したいprovizer(新語)の場合、ちょっと違うかも。

今はなにを目標にしているのだろうか。[]を複数求めてはいるが、goal

step-solverがどうするかによるのだが
ひとつひとつのgoalについて、resolventがもとまったら次のgoalに加えている。
ある段階では、opposのすべてについてresolve-idをする。

すべてのgoalについて[]を求めているのは確かだが、どの二つの[]がペアになっているかはわからない。
ということはgoalsのリスト (g1 g2 g3 ...)をもってまわり、全部のgoalが[]になるような証明の組み合わせができたら成功というわけか。


複数のgoalがあるということは、g1∧g2∧g3∧... なのでそうではないか

giの証明の一つをjで区別し"Πj(gi)"と書くとすると[]ijと[]kmは同時に成り立たないかもしれないではないか。
([]j1 []j2 []j3 ...)は同じ環境で全goalが[]になるということではないか。

証明が同じ環境であるとは??

<+P(a):-P(x)>と+<R(b):-R(x)>で-P(x)と-R(x)がgoalだとすると
conjは +P(x)∧+R(x)なのでxが同じでなくてはならないような気になるが
¬conjに∀-変数があるということは、もとのconjは
∃x(+P(x)∨+R(x)) ... (1)
であり、これに¬をつけて、
∀x(¬P(x)∧¬R(x)) ... (2)
となったわけで、変数xは
∀x(-P(x)) ... (3-1)
∀x(-R(x)) ... (3-2)
となって2つのclauseの別別のxになっている。

そう考えると、複数のgoalの場合に同じ変数になるというのは偶然でしかない。

rubbishでは、clauseごとに変数名を変えるので、こういうことは起きない。


一方で、(1)によってまず定数を導入して、それから否定をとることを考えると
aをskolem関数として

(-P(a)∧-R(a)) ... (2')

となり、これをnconjとするのが505.kqc。

★★定数導入したとすると
; graph505.kqc
(1 (x) (- P a))
(2 (y) (- R (f a)))

(3 () (+ P a))
(4 () (+ P b))
(5 (z) (+ R (f z))(+ P z))
(6 () (+ R (f a)))
(7 () (+ R (f b)))

なら

RUBBISH(3): (play-prover-gtrail '(1 2) "kqc/path/graph505.kqc")
RUBBISH(5): (reportc (analyze-p2code))

kqc file             : kqc/path/graph505.kqc

  *max-clauses*        = 1000
  *max-contradictions* = 30
  *max-trials*         = 100
  *max-steps*          = 100
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

# of pcodes          : 3
2 ((L1-1 L5-2) (L2-1 L5-1))
1 ((L2-1 L6-1))
1 ((L1-1 L3-1))
NIL

で

RUBBISH(10): (reportc(classify-cid-by-p2code))

kqc file             : kqc/path/graph505.kqc

  *max-clauses*        = 1000
  *max-contradictions* = 30
  *max-trials*         = 100
  *max-steps*          = 100
  *timeout-sec*        = 10
  *enable-semantics*   = NIL

# of pcodes          : 6
NIL (C7 C6 C5 C4 C3 C2 C1)
((L1-1 L5-2)) (C8)
((L1-1 L3-1)) (C9)
((L2-1 L6-1)) (C10)
((L2-1 L5-1)) (C11)
((L1-1 L5-2) (L2-1 L5-1)) (C13 C12)
NIL
RUBBISH(11): (list-proof0 'c12)

(C12 :RESOLUTION (L8-1 (C8 :RESOLUTION (L1-1 (C1 :INPUT)) (L5-2 (C5 :INPUT))))
 (L2-1 (C2 :INPUT)))
RUBBISH(12): (list-proof0 'c13)

(C13 :RESOLUTION
 (L11-1 (C11 :RESOLUTION (L2-1 (C2 :INPUT)) (L5-1 (C5 :INPUT))))
 (L1-1 (C1 :INPUT)))
RUBBISH(13):

先に結果(a)を知っていればskolem化できなくもない。ということか。

★「値はわからないけど定数」というのはありえないのか??
定数を使うことでclauseを超えた同一性を書ける。
もしもその定数が何かを知りたいとすると、その定数は未知の定数でありΣ全体でひとつ。
いや、ひとつである必要はない。clauseを超えて同じ定数に決まる。そういうもの。

skolem関数も、引数で値はかわるけれど、clauseを超えて同じ定数に決まる関数に決まる。

定数になるということは、Σ全体をスコープとして同じ値であるということ。

skolem関数の導入は、自動的にやろうとすると、どんな関数になるかわからないので困るけれど、実際に∃xを含む論理式を書いたときに、∃の意味を知っているのだから、関数も定義できるはずだ。だから、勝手な関数をとってきたり、関数の定義を自動的に作ったりするのは必要ない。

情報が十分にあれば関数定義は作れるだろうが、∃と書いているときは、具体的な計算は気にしていない。

★★proverとしては、個々の[]の証明には関係がないということか。

関係とは? literal間で使われる同じ変数の役割。


整理する
★ ∃定数について

ある定数の存在をもとめるconjectureの場合

∃x(+P(x) ∧ +R(x)) ... (4)
だと、これを否定して

∀x(-P(x)∨-R(x)) ... (5)
つまりclauseとしては
-P(x) -R(x) ... (6)
となり、1つのclauseになるから、変数が同じになることが保証される。

(4)にそのままskolemを導入して

+P(s) ∧ +R(s) ... (6)
とすると、clauseは
-P(s)-R(s)
となる。このsがいったい何なのかは、PとRの定義から求めないとなんとも言えないが、
それを決めるのは人間の仕事だろう。
存在だけをいうのは、計算しない人には便利だが、計算が必要な世界では、関数は計算定義が必要だし、特定の函数名もなくてはならない。

定数はそういうものの特別な例であり、引数のないskolem関数については、論理式を書いているときに、どのような定数なのかはわかっているはずである。


















