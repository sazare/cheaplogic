
20230423-about-checkmujun

+ checkmujunについてのメモ

checkmujunは、Σに矛盾が内在しているかどうかを判定する関数である。

0)[動機] 論理式の集合Σからφを証明する場合、Σに矛盾が含まれていないことが重要である。checkmujunは、論理式の集合に含まれる矛盾を発見する関数である。

1) [基本的なアルゴリズム] Σの全要素についてそれをgoalとしたrefutation処理によって矛盾が検出できるかどうかを判定する。
　? g ∈ Σ (Σ, g ⊢ ▫︎)
　
　となるような▫︎があれば、Σは矛盾している。

3) 証明器は一般的には停止するとは限らない。prover-gtrailでは処理の途中で終了するためのパラメーターを用意していて中断できる。これによって、証明器は不完全になるが、今の段階では十分だと考えている。

パラメタとそのデフォルト値は次のとおり。

  *max-clauses*        = 1000   最大clause数
  *max-contradictions* = 30　　 最大矛盾数
  *max-steps*          = 100　　最大証明ステップ数(一つの証明木の深さ)
  *timeout-sec*        = 10　　 処理時間の最大(単位は秒)

4) checkmujunは、全要素giについて
　(...(((Σ+g0)+g1)+g2)+...)
　というように処理する。一度矛盾が出たらその後のチェックは先の矛盾の影響を受ける
　だろう。とはいえ、後にチェックされるgiが先につくられた矛盾にまきこまれるのであれば
　そのgiもまた先行する矛盾に関与していることは間違いないので、気にしないでよい。
　先に作られた矛盾と関係なく新しい矛盾を作るのであれば、それは独立した矛盾であり新しい情報を得たということになる。(最小の矛盾集合をさがすような話だと、問題になるかもしれない)

5) checkmujunでΣが矛盾することを判定できない場合はあるが、それが問題になるか? それはこの証明器を何に使うか次第。
　・証明検索空間を限定しているので、その先のどこかに矛盾がある場合はみつけられない。それほど複雑な構造のΣの例を探す必要があるだろうか。
　・g∈Σの〜gを証明できない場合として、たとえばgのリテラル(+ P ...)に対して(- P ...)がΣに存在しないということもある。そのときは、そもそもPが証明に登場した段階で反証は不可能(Pが消えないから)であり、あまり気にする必要はないだろう。
　
[補足]
0) 数理論理学の論理体系では、もとの論理式に集合に矛盾が含まれていると、任意の命題φについてその証明と〜φの証明の両方が導出できるということである。だとすると、正しい命題を調べたい人には役に立たない。

・証明器の場合は、ある述語の命題φについてφと〜φの証明ができてたとしても、他の述語について矛盾するとは限らない。Σの構造から、他の述語の命題ψでは、φの矛盾に関係する述語を含まない証明しかありえない場合。

・私は、センサーで世界の観測から事実(fact)を命題化し、それを元に証明器で知識を活用するようなシステムを構想している。そのシステムでは、世界の状態の変化に伴い、factが過去の状態と矛盾する場合が想定できるので、logicを有効に使うためには、現状の知識(factを積み重ねた論理式の集合)が矛盾していないことが求められる。また、矛盾を発見した場合、その矛盾を解消するように知識Σを改造することが必要になる。
