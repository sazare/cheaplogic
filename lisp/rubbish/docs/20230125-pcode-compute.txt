pcodeの有効性と計算

[性質]
　1. すべてのresolventのliteralはinput のどれかのliteralのインスタンス
　2. proofのp2codeは、resolveされたpairの集合。
　3. ループの場合、同じresolveは1つになる。集合なので同じペアは二つない。

p2codeとは、証明の全resolved pairについて、そのinput literalのlidのpairに置き換えたものの集合。
証明をinput literalのpairの集合に射影したもの。

* 表現としては、pairの右と左は、lidの順序に従って一意になるようにする。(r l)は(l r)としてあつかう。し、pairの間にも順序を決めてp2code自体が一意になるようにする。

pcodeはp2codeのペアも分解して、input literalのlidの集合にしたもの。

[p2codeを使って証明をコントロールできるか?]
ふたつのclause C1, C2についてR=L1,L2 in C1,C2なら
resolventのp2codeは{(L1' L2')} ∪ p2code(C1) ∪ p2code(C2)になる

その証明の中ですでにこれと同じp2codeがある場合でも、普通はresolutionを行う必要がある。同じp2codeの発生を抑制するものではない。

任意のresolventのp2codeは自由だが、矛盾[]には制約がかかっていて[]のp2codeは面白い。


もしもΣの含む情報を表現する方法を考えるのであれば、p2codeでは証明のループをひとつのコードに射影するものなので、p2codeに対応する証明片の合成になるはず。

この証明片は手続ステップに対応する。

p2codeの要素であるpairに対応するmguがその証明片に対応するが、同じpairのmguは親のmguのインスタンスになる

計算コードとは何か? それはmguだろう。特に[]のmgu。

命題レベルの証明と、mguそれぞれの役割はなにか?

input L/Cに射影した証明の構造がp(2)code

[pcode]

pcodeはp2codeのpair構造を取り除いて、input literal id の集合にしてしまったもの。
pcode(c) = {r}∪{l} where (r, l) in p2code(c)

これは、誰と誰がresolveされるかの情報がないので、曖昧になる。


==============
(Σ, g)の証明はgを達成するための手順に対応する

手順として曖昧さがのこっているものもあるが、完全に手順の確定したアルゴリズムと、証明機構による曖昧さ解決機構に依存して処理としては曖昧にみえるものと、その間のいろいろな変種がある。

===============
証明と計算

人間があることがらについて知識を得るということは
関係的な認識をして、それを手続的なものにかえていくという順になっているように思う。
なぜなら、関係的な理解だとある目的を達成するには時間がかかるから。
特定の目的については手続にして効率よく実行できるようにする。

(人によっては、手順を考えることのほうが自然だと感じる人がいる。確かに、関係を考えることのほうが抽象的でむずかしいかもしれない。手順なら間違っていたらすぐにわかるが、関係の間違いは、発見するのが難しい。
物理的/計算的な世界に問いかけて結果が得られるということが重要。

正しいか間違っているかの認識は関係ではないのだろうか)


たとえば、ある場所に行くには、点から点への関係としての移動を積み立てて目的地にたどりつくルールを考える。
一度たどり着くと、その経験をもとに、移動を手続化して、道筋の判定はより効率よく行えるようになる。

というような仕組みではないかと思う。


証明の特徴
・並列性 = すべての組み合わせをやったとする
　非決定性の計算は、証明みたいなものか。
　すべての組み合わせを行うということ。量子計算に近いかも。
・

計算の特徴
・決定性の計算は、迷わない。

===============
人間は、あることがらについて、
1) ルールをみつけようとする。
　(1) 
　(2) 自分の行動を決めたあとで、ルールにあっているかどうか考える
　(3) そのルールにもとづいて自分の行動を決める
　
2) そのルールが妥当だときまったら
　(1) ルールを手続化する

メリット: 手続はいちいち迷わなくてよいので停滞する時間がへらせる

ルールが優先されるみたいな書き方だが、たぶん
 3) 手続を組み合わせて問題を考える
　(1) ある手続が達成することが何かを認識する
　　　これは論理化、述語化
　(2) その達成を組み合わせてよりおおきな目的を達成する
　　　これはプログラミング

だとすればHore方式かDijkstra方式でよいのか?

　述語を明文化するのはむずかしい
　だからのDijkstraのwpか





