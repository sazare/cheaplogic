20230409-correctnessofprover

see 20230408-correctnessofprover

====
証明器の正当性証明でする必要のあること

1) 記号は正しく実装されているか
2) 表現は正しく実装されているか
2.1) 論理式は正しく実装されているか
3) 推論規則は正しく実装されているか
3.1) 推論規則の表現は適切か
3.2) 推論規則の適用処理は適切か
4) 証明は正しく実装されているか
5) 証明器は正しく実装されているか


* 検証の方法・方式
* 表現の実装の正しさ
　　表現が正しいとは?
　　(1) 記号は、1:1対応になる。
　　　　記号に対する実装が決まるし、実装を見れば記号が決まる。

　　(2) 表現は、getter, setterが定義されていて、適切な動作をする。
　　　　composition(合成)とdecomposition(分解)
　　　　

　　・表現は1:n対応がありうる。表現実装から元の表現が得られないかもしれない。
　　　　記号は1:n対応でもよいかもしれない。同じ記号で異なる意味を担ってもうまくいく場合がある。
　　　　実装は、形式の世界から物理世界への変換である。
　　　　　そのとき、

* 処理の実装の正しさ
　　・推論規則(a1,b1,b2,...)はいろいろな物理表現がありうる。たとえば
　　　　b1 b2 ...
　　　　---------
　　　　　　a1
　　　　と書いたりできる。
　　　　どう書いても変わらないものが、推論規則である。

　　・推論規則の適用
　　　　推論規則r=(a,b)と論理式dがあったとき(a,bは論理式)
　　　　1) bとdのパターンマッチを行い、δ代入を求める
　　　　2) aにδを代入し、a・δを求める
　　　という処理/アルゴリズムを仮定しているが、具体的にプログラムを作った時、どうなっていれば正しい「推論規則の適用」になっているかを定義しておく必要がある。





