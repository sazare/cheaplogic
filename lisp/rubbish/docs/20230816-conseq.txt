20230816-conseq

1) どんどんfactが増えていくタイプ
　Σ={-P(x)}
  φ1 = +P(1) → Σ={-P(x), +P(1)} -> {+P(1), -P(x)∨x=1}
　φ2 = +P(2) → Σ={+P(1), +P(2), -P(x)∨x=1∨x=2}

 1a) 矛盾してもかまわない
 1b) +P(n)と矛盾する-P(n)だけを除外したい

**
　+P(1)と-P(x)∨x=1は□するのか?
　Σ⊢+P(1)とΣ⊢-P(x)∨x=1が同時に成り立つなら、Σは矛盾しているが、
  +P(1)と-P(x)∨x=1から1=1が導出され、これは真なので□にはならない
　-P(1)と+P(1)から□がでるので、-P(1)は□し、Σ⊢+P(1)であることがわかる。
**

　もしも {+P(1), +P(2), -P(x)} だと?
　step 0 Σ={-P(x)}だとする
　step 1 fact= +P(1)の場合
　　Σ={+P(1), -P(x)∨x=1}
　step 2 fact= +P(2)
　　Σ={+P(1), +P(2), -P(x)∨x=1∨x=2}
　というふうになる。

　a) 問いとして+P(2)が来たら、否定の-P(2)を作り
　　Σ:-P(2)からは□が出るので Σ⊢+P(2)がわかる。
　　Σ:+P(2)からは2=1∨2=2がでて、これは真になる(?)ので無視する。

　b) fact=-P(2)がくると+P(2)が矛盾するので消えて-P(2)で置き換わる。
　　-P(x)∨x=1∨x=2と-P(2)はresolveできないのでx=2は消えない。
　　ただし、矛盾しないかどうかの確認も必要で
　　{+P(1), +P(2), -P(x)∨x=1∨x=2}:+P(2)から 2=1∨2=2が導かれこれは
　　真になるので無視する(らしい)
　　これから
　　Σ={+P(1), -P(2), -P(x)∨x=1∨x=2}が残る。いいのか?
　　なんとなく
　　Σ={+P(1), -P(2), -P(x)∨x=1}になるといいような気がする

　　-P(2)と-P(x)∨x=1∨x=2から　-P(x)∨x=1がでてこないか??

　　じつは、-P(x)∨x=1∨x=2は
　　-P(x)∨+P(1)∨+P(2)と同じなので、これと-P(2)をresolveすると
　　-P(x)∨+P(1)になる。


　　つまり、{-P(x)}と+P(1)から{+P(1),-P(x)∨+P(1)}を作ればよいのではないか
　★★★　これはどこがまちがっているのか?

-P(x)と+P(1)から -P(x)∨+P(1)が導けるのか?
-P(1)⇒-P(x)なので、正しそう。

+P(2), {+P(1), -P(x)∨+P(1)}から矛盾が導けるかというとできない
+P(1){x=2}だが、+P(1)にxがでてこないのでx=2は無視される。

-P(x)∨+P(1)は-P(x){x=1}とは違う?

-P(x)if x¬=1 は-P(x)∨x=1であり、-P(x)∨+P(1)とは違う。

+P(2)と-P(x){x=1}からは2=1が導出され、これがsemanticに矛盾なので
+P(2)は拒絶される。

*無理やで


2) +P(-)となるobjectがuniqueな場合
　Σ={-P(x)}
  φ1 = +P(1) → Σ={-P(x), +P(1)} -> {+P(1), -P(x)∨x=1}
　φ2 = +P(2) → Σ={+P(1), -P(x)∨x=1, +P(2)}
　　　　　　　→ ? +P(1):+P(2)は矛盾なのか?
　　　　　　　　 ? -P(x)∨x=1:+P(2) => 2=1 =>□これと矛盾する
　　　　　　　　 ? -P(x)∨x=2:+P(1) => 1=2 →□

　方法1)
  +P(n) => λz{+P(n), -P(z)∨z=n} がメタルールとして存在する。uniqueness
　+P(n)のときfactr +P(n)は無条件で追加するとすれば、このfactに付随して
　-P(z)∨z=nがfactとして追加されるという感じ。
　これは全Σ変換時に適用される。

　すると
　　Σ={-P(x)}に+P(1)を追加する場合
　　{-P(x)}に{+P(1),-P(w)∨1=w}が追加される。
　　+P(1)は-P(x)のインスタンス-P(1)と矛盾するので-P(1)が除去だがこの除去が
　　-P(w)∨1=wで行われている。(これはルールにするべきではない。ドメインが
　　uniqueだからこうなる)

　　{+P(1), -P(w)∨w=1}に+P(2)を追加する場合
　　追加するfactは +P(2), -P(w)∨w=2
　　+P(1): +P(2)　比較不能
　　+P(1): -P(w)∨w=2  => 1=2 →□ 新しいのは右なので +P(1)は消える
　　-P(w)∨w=1 :+P(2)  => 2=1 →□ 新しいのは右なので -P(w)∨w=1は消える
　　-P(w)∨w=1 :-P(w)∨w=2 => 比較不能

　残ったものは
　　{+P(2), -P(w)∨w=2}

　  fact +P(n) に対して付加的なfact -P(w)∨w=n を生成するのがPのuniqunessの制約条件に対応する。








　　

　
　
