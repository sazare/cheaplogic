20230426-correctnessofprover

also see: 20230409-correctnessofprover.txt

概念と実装の適切性あるいは正当性はどうやって確認できるのか?

プログラムの正当性は、実は概念と概念の間の話であり、実装については何も語っていない。

たとえば、あるアルゴリズムが、それを実装したといわれるLISPプログラムで正しく実装されているのかどうかなど、誰も気にしない。

それは無駄だし無意味だからだろうか?

(例)

・万能チューリングマシンでは、個々のチューリングマシンの動作をシミュレートできると主張するが、それが同じアルゴリズムであることはどうやって証明するか?

・証明プログラムは、どの証明の定義を実装していて、その実装が正しいことをどう証明するのか。

・ある理論で、アルゴリズムを定義しているとき、そのアルゴリズムが何をするのかをその理論の枠で定義し、そのアルゴリズムがその問題を解いているのかを証明すべきだろう。

　たとえば、ε-δ論法はアルゴリズムなのでそれが何をしたいのかを定義する。

　ユークリッドの互除法は、証明しているようだ。
　では、互除法のプログラムがそのアルゴリズムを実装しているかということは証明されているのか。
　　教科書ではやっていそう。具体的なプログラミング言語では正当性は言わない。というか言えないだろう。
　　それを証明するには、その言語の意味を定義しなくてはならず、その言語のコンパイラ、実行環境、がその意味を保証しているかどうかもいわなくてはならない。


------

1. アルゴリズムが正しく実装されているかどうか?

2. プログラムの正当性は、論理式とプログラムが併記される世界で行われる。
　つまり、Javaやlispのプログラムでの正当性の証明はできない
　論理式とプログラミング言語の世界は単純につながらないから

　やるとしたら
　(1) 論理式とプログラミング言語の世界の式との対応関係を定義
　　　アルゴリズムの意味を不変条件などによって定義するのなら、論理式の意味を実装でどう解釈するか
　　　それが妥当だというためには、論理式が成り立つということを実装ではどう解釈/実装できるのか?
　　　などが必要か

　(2) アルゴリズム記述言語を定義する
　　　こちらはアルゴリズムとプログラムを直接みることだとすると

　　　このアルゴリズム記述言語と自然プログラミング言語との関係
　　　アルゴリズム記述言語がよってたつ基本概念について
　　　その概念がプログラミング言語で必要な条件のもと、適切に作られているかどうか?

　　　たとえば代入　x := a は、どのような条件が満たされていいる時、実装として正しいのか?

　　　x:=aが何に基づいて実行されるとアルゴリズム言語では想定しているのか?

　　　アルゴリズムの計算モデルがどのように定義されていて、実装は何を保証しているのか?

　　　などなど


　　
[代入アルゴリズム]


[unificationアルゴリズム]


[resolutionアルゴリズム]


[proverアルゴリズム]


rubbishだと、sbclがcommonlispプログラムをどのように実行するか。つまり、ある関数やマクロの実行によって何が変わるかを定義し、実装が適切かを証明しなくてはならない。


commonlispの仕様はあの分厚い本なのか?
実装によらない機能を定義しているのか?
適切な実装であることをどう証明するのか?

定義されたlisp関数の正当性を、処理系の仕様の公理でどう証明するか。
処理系の仕様が処理系の定義を適切に実装していることを証明するとは何か?





