
20230408-correctnessofprover

 see 20230326-correctnessofprover


証明器の正当性を定義する

1) 証明は論理式の集合に推論規則を適用したもの
2) 推論規則は、パターンマッチとルールの後半に対するこのパターン結果の適用
　substitutionの定義(チェックポイント2)
　パターンの抽出と
　その結果のルール後半への適用
　という操作を定義する必要がある(チェックポイント3)。そして正当性証明

3) 論理式はsyntaxで定義されている。
　それが適切にデータに実装されているかどうか(チェックポイント1)


4) 「規則の適用」を個別に実行する処理が証明器になる
　　なにかしら「証明器」のやりたいことを定義して、それが実現されているかどうか。

「実現される」⇔「実装が定義を満たしている」

論理的な世界と現実の世界をつなぐ話なので、
実装が正しいかどうかを判定できる方法を定義する必要がある。


定義は抽象的だが、それを物理的に実装したとき、成り立つべき条件があり
その条件が成り立つかどうかを確認する方法が定義される。

　推論規則なら(S1, S2)のような概念があって
　S1とCのマッチングにより、代入が取り出され
　S2に代入を適用して次の論理式を作る

-----
ということで順番に定義とそれの正しい実装かどうかを判定する方法を書いてみる

・S式による実装をもとに

1) 記号
　atomで実装する。

　概念の記号と実装の記号の1:1対応

1.5) 表現一般については、is/getter/setter関数が定義できることと等価かも。
　1:1対応であることが条件。

2) 項
　定数
　　記号である

　変数
　　記号である

　関数形式
　　(記号 . 引数)の形

3) 論理式
　形は項で関数記号として
　　¬、述語記号、∧、∨、≡、⊃などがあること。かな


5) 推論規則
　式の変形規則の表現だが、その一部についての操作が決められている。
　　5.0) 規則とは({φ,...}, ψ)のような構造を持つ。[φ,... / ψ]と書いても同じことだと解釈できる。
　　　　　このような書き方の違いが本質的でないと思える理由はなにか?
　　5.1) マッチングと抽出
　　　　　マッチングを特定のアルゴリズムを考慮しないようにするために ある代入[t/v]があってという書き方をするかも。
　　　　　アルゴリズムを書かないようにするために「存在して」を使う。

　　5.2) 項の適用(代入)
　　5.3) Sequent(1つまた2つ)からsequentを作り出す

6) 論理式/Sequentに対する推論規則の適用


7) 

