20230312-conflict-disolver-lisp

サンプルのシナリオ

;A) consistent mutation
;simply inclease the knowledge
(require :gtrail)
(require :mutat)
(in-package :rubbish)

; no a in [1:10]
(factisf (loop for i from 1 to 10 collect (list () (list '- 'P i 'a))))

; see facts
(setq f1 (factIs ( () (+ P 1 a))))
;(setq m1  (mutate f1))
; m1 is a set of cid of contr

;(setq mm1 (mujun-set f1))
;(causes-contra f1 mm1)

(mutate f1)

(setq f2 (factIs ( () (+ P 5 b))))
(mutate f2)

(setq f3 (factIs ( () (+ P 8 c))))
(mutate f3)

; c5やc8は残っている



;★B) consistent but mutation
;; this system not understand a is unique.
;; so, This is happend

(require :gtrail)
(require :mutat)
(in-package :rubbish)

; no a in [1:10]
(factisf (loop for i from 1 to 10 collect (list () (list '- 'P i 'a))))

(setq f1 (factIs ( () (+ P 1 a))))
(mutate f1)

(setq f2 (factIs ( () (+ P 5 a))))
(mutate f2)

(setq f3 (factIs ( () (+ P 8 a))))
(mutate f3)

; c1,c5,c8は消えて+Pがはいる

この例では、前の位置のaが消えたことが書かれていない

;;★去ったaの+P(?,a)を消す

(require :gtrail)
(require :mutat)
(in-package :rubbish)

; no a in [1:10]
(factisf (loop for i from 1 to 10 collect (list () (list '- 'P i 'a))))

(setq f1 (factIs ( () (+ P 1 a))))
(mutate f1)

(setq f2 (factis (() (+ P 3 a))(() (- P 1 a))))
(mutate f2)

(setq f3 (factIs (() (+ P 8 a)) (() (- P 3 a))))
(mutate f3)

いいけど、[]が全部残っているのはよくない。よい???
ログとしてはあってもいいけどΣの最新状態としては適切でないと思う。
□も消すか

