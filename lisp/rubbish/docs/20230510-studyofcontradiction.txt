20230510-studyofcontradiction

Σから□が導出できて問題なのは、そこから任意の式が導出できるからということなのだけど
それは推論規則に、F⇒A (Aは任意の論理式)みたいのがあるからではなかっただろうか。

resolution のproverを使う場合、まず

1) □からは何も導出できない

リテラルがなければresolveされることがないから
だから、□ ∈ Σの場合、それだけでは脅威はない。

さらに
2) Σ, □ ⊢ Aは、Σ⊢Aと同じ。
　　Σに□を加えてもΣと同じものしか証明できない。

3) Σ, A ⊢ □の場合、Σ⊢¬Aの証明ができる。(□の証明が存在するとはそういうことだ)
　これは、Σ, A ⊢□の証明Πに含まれる、すべての述語Pについて、+Pと-Pの証明が作れるということだが、


Σ▷□の途中までの証明を組み替えて、どのような証明が可能かを考えたい。


****
★
1. ゴールgを決めてΣからΠ(Σ, g),Σからgをゴールとして求める証明は、gをresolveする相手がいるので〜gの証明も作っている。

2. resolutionで、Σ⊢□ができたといすると、ある述語が存在(Pとする)して、+Pと-Pのresolveで□が導出される。
だから、Σから矛盾が導出されるということは、何か述語のunit clauseが存在し、それについて矛盾になるということは言える。

3. だから、Σが矛盾しているかどうかのチェックをするためには、Σのすべての述語記号Pについて、
　1) Σ, +P(x) ⊢ □ ? とΣ, -P(x) ⊢　□? を確認すればよい。ただし、引数の数はPによってきまる。
　2) 片方が証明できれば、もう片方もいえるので、どちらか一方でよい。

4. わざわざ存在しないunit clauseを作るのは嫌なので、∀c ∈ Σについて、Σ, c⊢□? を確認すればよいのではないかというのを以前考えて、実装した(check-mujun)

例) これはどうか?
 A) 
　　1. +P-R
    2. -P-S
    3. +S-P
　　4. +R+P

2023/05/12の段階ではだめ。proverの設計がこの目的にはあっていない。
2023/05/12夜実装開始。check-mujun用か・・


