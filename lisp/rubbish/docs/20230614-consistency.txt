20230614-consistency

[目次]
1 矛盾の定義
2 resolutionと構成的証明
3 矛盾発見手続
　論理式の集合から矛盾をみつける
　矛盾する部分集合をみつける
4 無矛盾拡大
　論理式の列から無矛盾集合を構成する
5 factの時系列
　矛盾する可能性のある論理式の列から無矛盾集合を作る
　　・真らしさ判定基準
　　・無矛盾集合の分岐

6. それぞれは無矛盾でお互いに矛盾する論理式の集合


その他の話題

・変数のあるfactはありうるか?
　? 変数を含む論理式は、無限について述べているが、無限についてfactをいうことはセンサーには無理。
　　factというより、定理
　? factでなく、天から与えられるルールとしては変数を含む論理式はありうる
　　だが、それが真実かどうかはこの世界ではわからない。

　0次元の世界と1次元の世界の差

　プログラミング言語では、どんなデータも有限の表現しか持てない。
　無限長の整数は?

・変数があるとき、我々は何を考えているのか?(個人的な思い)
　無限の夢を見ているような気がする
　役に立つとか無理だとかいう話はのぞいて、そうではないか?
　無限のドメインを有限の表現で過不足なく表現することはできない。


・センサーとロジックの協力
　1) センサーがfact論理式を生成する
　　・クラスタリングから論理式が作れるか?
　　・(記号-概念)の生成ができるか(これはロジックの仕事か?)
　　　　↑意味は操作で定義される

　2) ロジックが無矛盾な知識を構成する
　　[ここが上]


　　ロジックによって表現される知識が役にたつかどうか?
　　少なくとも、矛盾しているとき、それが表現される。
　　演繹推論では、もとの知識のインスタンスしかでてこない。
　　　あたらしい知識の発見はない。
　　　　だから機械学習などの技法を使い、帰納的な知識を作ることと組み合わせてみる。

　　表現と物理的な現象との関係付けが妥当であるかどうかをどうやって示すか?
　　誰にとって妥当か?




[本文]

無矛盾性と矛盾

論理式として積和標準形であるものと考え、A_1∨A_2∨..をclauseと呼ぶ。
Atomはリテラルと呼ぶ。
clauseの集合Σは、∧p_i where p_i ∈Σとみなす。
集合なので、

∀p∈Σについて、Σ⊢p　が存在する。

Σの要素の論理式で使われるすべての述語記号、関数記号、定数記号を次のように表すことにする。

Pred(Σ)
Func(Σ)
Cons(Σ)


矛盾の定義
　論理式の集合Σがあったとき、ある論理式Aについて
　　Σ⊢A　かつ　Σ⊢¬A
　のときに「ΣはAについて矛盾している」と呼ぶことにする。

　もしもA⊃Bならば、ΣがAについて矛盾しているとき、ΣはBについて矛盾している。

　A∈Σ かつ ¬A∈ΣならばΣはAについて矛盾する。

Σに含まれないAについて、Σが矛盾する場合もあるので、これの逆は成り立たない。


もしもPred(Σ)に含まれない述語記号のリテラルBがある場合、Σ⊢BもΣ⊢¬Bも存在しないので、ΣがBについて矛盾することはない。





***

[矛盾判定アルゴリズムについて]

* 判定アルゴリズムA
　Σのすべての要素aについて、
　　Σ⊢¬aが存在すれば、Σはaについて矛盾している(判定)
　すべての要素aについてこの証明が存在しなければ、Σは無矛盾である(判定)

根拠: ∀a∈Σについて、Σ⊢¬aが存在すれば、Σはaについて矛盾している。

ただし、Σ⊢¬aの証明をみつけるのは終わりのわからない手順になりうるので、停止性を保証できない。


*あるclauseから□が証明できたとすると、clauseに含まれているリテラルはすべてなんらかのclauseによってresolveされている。
　□すなわちclauseの要素が0になったということは、□の証明にあらわれるすべてのリテラルは対応する否定のリテラルによって消去されている。
　だから、証明の中でUnit clauseが証明されていて、それをL1とすると、¬L1の証明も構成できる。
　だから矛盾が存在すれば、いつかは発見できる。

* 






