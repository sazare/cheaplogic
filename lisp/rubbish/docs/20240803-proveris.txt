20240803-proveris.txt

証明器の定義

proverをFOLで書くのが目的。

1. 命題算証明器を書く
2. 述語算証明器を書く

の順番で考えていこう。

1. 命題算証明器
このproverの公理系をΩと書くとする。

Ωから何を証明したいのか?

命題論理のΣがgiveとする。

このproverを使うには、次の手順になる。
1) ΣをΩのwffの定義にあわせて書き換える。Σ'とする。
2) ΣからΩの記号に命題定数についての定義Δを生成する。
3) Ω'+ Σ' + Δ からの□の証明を作ることになるのだろうか

証明プロセスの効率化のため、定数定義をΩに適用して、そのresolutionは終わったこととする。???


Ωは、命題算証明器を定義するもの。

 1. wffの定義
 2. resolutionの定義
 3. refutationの定義

1. literalの定義
　(+ a) (- a)
　か、命題を表す関数pを導入して
　(p + a) (p - a)
 　このpは命題定数であり、Σに依存して決まる。

 1 (a) (+ isLit  (p + a)) (- Atom a))
 2 (a) (+ isLit (p - a)) (- Atom a))

かな。
 (x) (+ Atom x) (- Propsym x))

なので、Atomなしで直接Propsymでもよさそうに見える。


Σが決まった時、そこにでてくる命題記号について
　(+ Propsym a)
を生成する。
これはΩの外側の処理。

Σの例
　Σ1 ((+ a)) (1 (- a))
　Σ2 ((+ a)(- b)) ((+ b)) (1 (- a))
　Σ3 ((+ a)(- b)(- c)) ((- a)(+ d))((+b)(+ d))((-d))(1 (+ c))

Σ1について考える。
まず、定数定義は
　(()(+ Propsym a))

clauseの定義(集合の定義)
　(x) (+ isClause (s x))(- isLit x))  ; unit clause
    (x y) (+ isClause (sa x y)) (- isLit x)(- isClause y)) ; depends on sa, s

または、clauseの要素を選ぶ関数chooseを使って書くとか

いずれにせよ、選ぶ方法があって、

**** 
clauseの定義は、literalの集合。
LKなどでは、順番をかえる規則を使っている。それだと無限ループになるけどな


(isClause (clause name body) )(- name number)(- set l1 set))

なんかな


とりあえず、2literalまで考える。LKとかはなんかごまかしている。
そもそもLKの記号操作はちゃんと定義されているわけではなさそう。
人間にわかればよいということか。


((x y) (+ isClause (s2 x y) ) (- isLit x)(- isLit y))
((x) (+ isClause (s1 x)) (- isLit x))

((x y) (- isClause (s1 + x))(- isClause (s1 - x)) (+ isClause (s0)))

clauseの識別とliteral集合である構造

((x y z) (- isClause (c2 (s1 + x) y)) (- isClause (c2 (s1 - x) z)) (+ isClause (s2 y z)))

と書きたいのかな


★
(l1 l2 ...1 ...2) (- isC l1 ...1) (- isC l2 ...2) (- Oppo l1 l2) (+ isC ...1 ...2)
(l1 l2) (+ Oppo l1 l2) (- isN l1)(- isP l2)(- eqP l1 l2))

これは?
(l1 l2 α β) (- isC l1 α) (- isC l2 β) (- Oppo l1 l2) (+ isC ∅ (∪ α β))
(l1 l2) (+ Oppo l1 l2) (- isN l1)(- isP l2)(- eqP l1 l2))

isNとisPはl1,l2が逆もありだが、特に書かなくてもなんとかならんか。


問題は
(C) (+ isC ∅ C) ≡ (a C) (+ isC a C-a) (- isL a) (- ∈ a C))

みたいなことを書く必要があるのかないのか

とか?

