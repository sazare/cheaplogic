無限について

clause setΣの証明全体を‖Σ‖と書くとする。

(1) -P(x,y)+P(x-1,f(y)+1)-(x>0)
(2) +P(0,1)

に対して、nconjを

(0) -P(N,Z)

とすると、NからZへの関数が定義できるる

Σ={(0),(1),(2)}とすると、
‖Σ‖ は無限の証明を含む。
具体的なNに対しては、証明の長さは有限になるので、‖Σ‖には有限長の証明が無限個含まれる。
(Σ={+P(a), +P(b), -P(x)}の場合、‖Σ‖は2つの要素/証明しか持たない。

この-P+Pが証明構造のループをうむ。
命題算では、-P+Pはトートロジーになるので、そのようなclauseは除去できる。
だから、無限の証明構造は生まれない。

述語算では、termの部分で、<-P:+P>が除去されないことがあるので、無限の構造をうむ。

ということは、組み合わせ(群なのか)が証明構造を形づくる。

このループ構造を静的な表現で捉えられると、表現では無限が抑制できる。

ID axiomやFlowのあれ。

つまり、組み合わせは計算機構にやらせて、証明から無限の表現構造を除去するという方法。
計算機構は、迷いなく/backtrackなく計算を前進させるから、証明より効率がよい。

証明機構で計算しようというのは非効率だと思う。
なぜ、そんなことをしようとするのか??

証明と計算は対応があるけれど、証明だけで計算をしたり、計算だけで証明をしたりするのは効率が悪い。
それぞれの得意なことをすればよい。

それとも、結局同じことになってしまうのだろうか??

*****

