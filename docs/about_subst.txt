substitutionについて

代入(substitution)の表現は、σ={v_i←e_i}でよいだろう。
あるいは(v_i,e_i)と書くかもしれないが。

代入あるいは代入表現に対する制約条件は何か?
表現への代入の適用 e*σ をどう定義するか?


さらに、σ、ςが与えられた時、σ*ςをどう定義するか。

を考える。

0. 基本概念
V(σ) = {v1,v2,...}
S(e) = eに出現する記号の集合
V(e) = eに出現する変数の集合
Ve(σ) = ∪_i V(e_i)


1. e*σ
σは{v1←e1,v2←e2,...}と書かれる。
*この順番は意味を持つのか?


定義1.1
 (1) E*{v←e} は、eに出現するvを同時にeで置き換える
または
 (2) Eでvの出現順にeで置き換えるとすると、eにvが出現しているとき、v←eを選ぶ順番で結果が変わる。

　代入を適用する順序によって結果が変わる場合、unificationで、e1とe2の引数の順序によって
　結果の表現が変わることになる。その場合は、異なる表現の代入が同じ代入の機能を持つことを
　証明する必要がある。


　この違いを表す条件は
　V(σ) ∩ V_e(e)
　が空であるという条件をつけるかどうかになり、(より強くないか?)
　これはunificationのinside checkに相当するだろう。

ancient unificationに基づく場合、まず前提として2つのe1,e2は共通変数を持たないところから
始まる。(resolution principleの前提)
そして、disagreement setを繰り返し解消していくという手順では、変数がsqueezeされて
最終的にx←e[x]となってinside checkにひっかかり、このようなmguは作られない。

一方で、disagreement setから作られたmguのcomponentをmguにどのようにして蓄積していくか。
単純にpushしていくのか、代入の合成を繰り返していくのか。

pushしていく場合というのは、
すでに求めたv_i←e_iのe_iに新しいσ_{i+1}を適用しないということである。
こうして得られたmguは、要素のσiを順番(1,2,...)に適用していけば、それを見つけた順番
になるので、unificationのアルゴリズムが機能してそれはmguになるはず。

代入の制約条件として考えた、「同時に」置き換えるかどうかはここと関係する。

もしも代入の合成を行う場合、σiを適用する順番は関係なくなる。

代入の合成にかかる計算コストが、他の部分のコストに見合うかどうかになる。

■代入の適用順序
　σの中の要素の適用順序であり、異なる表現の代入σ'があったとき、
　任意のeについて、e*σとe*σ'が同じならσ=σ'と考えられるだろう。(well definedか?)

■代入の等価性
　σとσ'が変数を除いて同じ場合はどう考えるべきか。
　異なる変数に対する代入が等価であるということを考える意味はあるのか?

　論理式で∀xがついているxをyに置き換えると論理的には等価になる。

　unificationは2つのclauseの変数についての局所的な操作である。
　2つの対立するliteralの同一性が、clauseの他の部分に反映される。
　別のresolutionで得られたmguをそのまま他のclauseに適用することはない。

　proofを考える時も、あるmguはそのステップの間だけ有効になる。

　もしも、resolveされるliteral以外の2clausesの残りの部分について
　変数の書き換えが起きたとしても、もともと共通変数がないという条件のもとであり
その変数は2つのparent clausesに出現し、resolventの変数を含むのだから
変数の混乱は起きない。はず

■ もしも代入単体で、等価性を考えたとして、そのような同値関係は役に立つのか?
　代入の等価性は何の役に立つのか?

■ 









もしも条件を判定するなら、これを高速に実施するにはどうできるか問題になる?


定義1.2
 e*σ≡e*{v1←e1}*{v2←e2}*...







