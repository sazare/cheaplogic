1. 概要

　logicの応用を考えたい。
　世界について、何か有意義なことを主張したい。
　演繹システムは、元の知識Σに書かれている以上のことは導けない。
　clause formなら、reslventのliteralはすべて入力clauseのliteralのインスタンス。

　どこかで新しい知識を仕入れる必要があるのだが、たとえば機械学習とつなける。
　世界をMLで観測し、命題として表現し、論理システムに提供する。

　世界 ⇨ [ML] ⇨ Fact ⇨ [Logical] ⇨ 行動や情報、新しい知識体
　　　　　　　　　　　　　↗︎
　　　　　　　　　　　　知識

　この場合の課題
　　1) MLで作れるFactの整合性は問わない。それを信じる
　　2) MLで得られるFactから帰納によって新しいルールは得られるか?
　　　　みかけの無限と、実質有限の間をどうするか
　　3) MLからFactを作る時のルールは恣意性がある
　　　　その妥当性はどう評価するか


2. 20の扉
　知識が新しい事実によって変化していく様をみる。

  質問者からみた基本的なループ(他の例でも同じパターン)は、
  1) 問を出す
　2) 回答をえる => fact
　3) factに基づいて質問者の知識を更新(推論方法)する
　4) 知識の中に回答とみせるる(判定方法)ものがあれば、次の問=チャレンジ
　5) 

　問はそれがfactであれば正解だと考える。
　という点では、問は?と+の二種類の符号があるのかも。
　属性についての質問と、答えクラスのclauseでの(GUC)通知
　a) ?Flying(x)
　b) +Bat(x)

　aは属性の有無を聞いていて、+Flying()か-Flying()が回答になる。
　bは対象の名前を言っていて、-Bat(x)は答えになっていないのでナンセンス。

　今は、GUCがΣに登場したら、それを回答だとみなす。
　それがrejectされたら、別のfactがΣに登場するまで続ける。

　* resolutionはsyntaxのルールだが、ここでやろうとしているのはsemanticsのresolutionではないか?

　実際
　1) Knowledge Σ、fact fが与えられる。
　2) L in C in Σで、
　　2.1) ∃<f:L> の場合、Lはtrue
　　　CをΣから除去する。
　　　Lはfによってtrueとなるので、Cもtrueとなり、20の扉としては不要なclassになる。

　　　?? 本当は、Lからfの部分を除いて残すのが正しいかも。つまり
　　　　L where ¬<f:L>   ;; <f:L>で同値にできない部分のLということ。

　　　　+P(x) と +P(3) があったら、
　　　　　+P(x) wehre x !=3
　　　　というliteral/clause


　　2.2) ∃<¬f:L> の場合、Lはfalseになる。
　　　Cを置き換える C-{L} * σ where σ=<¬f:L>

　　　これは、Lが正しいfと一致しないので、Lはfalseだから、resolutionと同じでそのLをCから除去する。


　　2.3) ¬∃<f:L> かつ¬∃<¬f:L> の場合
　　　Lはfと関係ないのでなにもしない。ΣはΣのまま
　　　

* 書き方について
ok
　-LiveInsea()-Flying()+FlyingFish()

ok
　-LiveInsea()-Flying()+FlyingFish()
  +FlyingFish()

xxx
　-LiveIn(sea)-Flying()+Itis()
  +Itis(flyingfish)

　
　
