Factとは?

背景
・論理装置(Logic Device)は演繹推論をする。
・数学は、概念を定義して、それの性質を証明する。
　概念は証明したいことを表すように構成する。
　このとき、前提から定理までの間に証明装置が余分な情報を追加しないのが、演繹推論。
　数学の活動としては、概念を定義するあたりで余分なものを追加していると思うが、前提に余分なものを加えないという意味で、演繹システムを使っているのであり、前提を作る時、証明するに十分な情報をもりこむという点では、演繹システムをうまく使っている。

・考えている論理の応用システムの全体構成は、論理装置と外部の観測装置を持つ。
　観測装置の実体は、人間、AI学習のセンサー機能(分類器とか)、新しい情報を作り出すメカニズム。
　現実世界の情報をfactという表現に変換する装置と考えても良い。
　観測装置の観測する世界は動的に変化するので、論理装置には含めない。演繹システムとはあいいれないからである。
　論理装置と観測装置を分けるということだ。

・外部の装置には、世界を変化させる機能を持つものもある。
　世界を変化させ、その変化を観測してあたらしいfact表現を作る。
　論理装置が推論して生成される表現が、新しい操作を発火する場合がある。

・リテラルの役割
　- clauseが適用される条件のリテラル
　　　これは、観測装置が返すfactリテラルに適用される
　- 外部装置を起動するリテラル
　　　外部装置が、世界を変化させるものであれば、そのような処理を呼び出す装置であると考えても良い。

　外部装置は非同期で観測範囲を観測し、判定した状態をGUC(fact)に変換する。
　-　論理装置は、観測装置のfactリテラルの発生によって有効になるclauseを選ぶ。(factとcomplementなliteralの消滅)
　　選ぶ方法はなんでもよい。
　- 
　
・論理装置->論理式(発火)⇨外部操作装置の起動⇨ 状態の観測装置により新しいfact表現の発生
　⇨　論理装置によるΣ更新

　のようなループを想定

・Fact表現はまずはGround Unit Clause(GUC)とする。
　世界はgroundだけから構成されているので、変数を含む場合、groundな定数のすべてについて述語関係を確認する
　という仕事まで観測装置にやらせるとすると、全定数についての知識が必要になる。
　そのような知識をあらかじめ持たせることはできるか?

　世界のすべての状態に名前をつけられるか?　誰がつけるのか? 
　Σを書いた人は、すべての定数を定義できるはず。
　ただし観測装置がそれに一致しない定数をみつけるかもしれない。
　「分類不能」のような状態。

0. 論理式のスコープ
　観測装置で見出されたfact式(GUC)は、その瞬間に成り立つ。

　Σに書かれたGUCは、Σのテーマの存在全体の期間(スコープ)について成り立つ。

　Σのテーマは、例えばΣ1だとFLという述語が表すものになり、Σ0だと{sw, lamp, bat}の組が表すなにかになる。
　人間の意図としては、FL ≡ (sw, lamp, bat)のような関係にはなる。

　懐中電灯の例では、Σは懐中電灯の仕様になり、ある懐中電灯を使う期間、その懐中電灯について成り立つ条件がΣに書かれている。

　つまり、その懐中電灯はスイッチをonにすると明るくなるし、offにすると暗くなる。それはその懐中電灯が存在する期間、常に成り立つ。
　という意味。

　正常な状態を観測するとたとえば
　　a) +FL(on, bright)
　が得られる。
　これはΣ1と矛盾せず、Σ1を変化させないので、正常だと考えられる。
　　b) +FL(off, dark)
　でも同じ。

　懐中電灯を使う側では、観測装置はそのような状態以外にも、「スイッチをonにしても暗いまま」という状態がありうる。
　
　　c) +FL(on, dark)
　という状態/factで、

　これは最初のΣ1だとcomplemnet literalがΣ1にないので[]がうまれず、正常とみなされる。

　これを異常だと判定したい。

　Σ1を、
　　{+FL(on, bright), +FL(off, dark)}
　と書く。
　cがcomplementとなるためには、
　Σ1は、
　　d) {+FL(on, bright), +FL(off, dark), -FL(on, dark)}
　と書くべきなのか?
　こう書いてあると、fact cは、相手がいて[]をうむ。

　だが、
　-FL(on, dark)を書くことは正当化できるか?

　・引数の組み合わせを全部列挙し、それが仕様の上で成り立つべきかどうかを書くと考えると。
 
　　e) {+FL(on, bright), +FL(off, dark), -FL(on, dark), -FL(off, bright)}

　　と書かなくてはならない。
　
　　　-FL(off, bright)
　　は奇跡が起こらないといっているように見える。奇跡については書きたくない。
　　記述の経済性から・・

　・人間がすべての組み合わせを考えるのか?
　　今は{on,off}x{bright,dark}なので4つの組み合わせを書いた。
　　すべての定数があらかじめわからない場合は、変数を使って書くのだろう。

　・確かに仕様としては、正常な場合だけでなく不都合な場合も書くことがあるだろう
　　(設計の段階で、最初、基本的な機能について書き、やがて範囲外の場合についても書くという場合)
　　今は、「電池が切れた」ときの話なので、仕様の範囲だと考えられる。

　　+でない条件を仕様にかくとは?

　　　-FL(on, dark)

　　は何を書いているのか?
　　電池が切れた時
　　　f) +FL(on, dark)
　　は起きうる。
　　だとすれば fも仕様なのか?


　　電池について書いていないことが、仕様の不完全なのか?

　　基本機能では、電池が空かどうかは気にしない。
　　電池が空の場合は、確かに仕様の範囲だが、また別の話のような気がする。


　　電池を含めて描き直すとこうなる。
　　　+FL(on, bright, charged)
　　　+FL(on, dark, emtpy)
　　　+FL(off, dark, x)
　　sw=offの場合、電池の状態は関係なく暗くなる。
　　しかし、
　　　+FL(off, dark, charged)
　　　+FL(off, dark, empty)
　　は意味が同じではないかもしれない。電池に関係なくdarkだということだから、これでいいのかも。

　　・懐中電灯を使う時、電池を気にするか?(気にするが、まずはスイッチをいれてつけようとする)
　　・スイッチをonにして、明るくならないとき、電池を確認する。
　　この２段階構造はなにか???


　　g) +FL(on, bright)
　　h) +FL(off, dark)

　　となる。電池を含めた述語をFL2とし、こういう関係があると考える。

　　+FL(x,y) ≡ +FL2(x, y, z)
　　zがバッテリー。

　　と追加したとすると、仕様はこう書き直される。

　　g') +FL2(on, bright, z)
　　h') +FL2(off, dark, z)

　　ここでg'は正確ではなかったということがわかる。つまりこうでなくてはならない。

　　g1) +FL2(on, bright, charged)
　　g2) +FL2(on, dark, empty)

　ここまで何をしているのだろうか?
　もともとのgは正しくなかったということか。

　しかし、電池のことを考えず懐中電灯の基本的な機能は、gであり、そのとき電池はつねにchargedを前提としているということだ。

　こういった内省は、仕様を明確にしていくプロセスということなのか?


　* FLとFL2を導入する必要性と価値?


***　この例の課題
・仕様というものの意味
・記述する対象の増減と式の関係
・
