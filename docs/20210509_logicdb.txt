20の扉は、Logic Databaseの基本になるのか? + 懐中時計再考

[EOLOシステム(External Observer - LOgic)]
・factは外部システムで得られる。
・外部システムは推論しない。か
・外部システムで帰納推論してもよい。か
・内部システムは演繹推論しかしない。
・知識の表現は、eqvで表し、両方向の推論を許す。
　それは、あるモノはその性質の列挙と同じだという考えになる。
　(部品と製品のような関係しか書けないのか??)

* SAT?
　ここでいうLogic Databaseは、SATと同じなのかもしれない。
　矛盾か証明が見つかった時、述語論理のmguが答えになるという感じでSATとつながる。

　違いは、factひとつずつふえていくこと
　SATの場合はfactのないケースもありそう。

　Alloyには∀などがでてくるが、述語論理なのか? SAT solverを使っているから、
　SAT Solverより高度なものか??
  Alloyわからん

* Prolog?
　DBにある問をなげると、具体的な値が得られる。
　　これだとプログラムなのでPrologになりそう。
　Prologの知識表現はプログラムなので、違うのではないか。
　　手順のない知識をPrologで表現できないだろう。
　20の扉の知識は手順のない知識なのか?

* ポイントは、
　・述語論理で知識をどこまで表現できるか。
　　あるいは、どのような問題ならきちんと表現できるのか
　　どういう問題は表現できないのか
　・効率よく答えを導きだせるのか
　　これは問題のタイプと関係するので、上の問と相互に考える必要がありそう。

* 問を作る

・問を作ることもデータベースの構造と関係がありそう。
　アルゴリズム的には、問は知識をふたつに分割したとき、それぞれが最大になるようにするというのが考えられる。
　何を最大にするかというと、その問のyes/noに含まれるモノの数の最大化を思いつく。
。
　clauseには問の性質を含まないものもあるので、ひとつの問によってモノは3つに分類される。
　Y型、N型、O型
　O型はその他であり、この問のfactを適用したとき、Oに含まれるclauseはは減らないので
　なるべくOは少ないほうがよい。
　YとNは均等に最大個数であればよい。

などなど。

* factの形　
　factは+と-がある。
　+Fの場合は、-Fリテラルがresolveされて消え、+Fリテラルを含むclauseが消える。
　-Fの場合は、+Fリテラルがresolveされ、-Fリテラルを含むclauseが消えるのか??

　(0) -P(a)がfactである
　とはどういうことか。
　もしもDomainが{a,b,c}ならば、
　　(1) +P(b)v+P(c)
　がfactと同値になるが、(1)はunitでないclauseでありfactとはいえない。
　bなのかcなのかわからない知識はまだfactと呼べない。

　(これをfactと呼ぶと、知識DBのすべてのclauseはfactであるということになる。
　　それはそれで解釈として成り立つ(知識は世界に対するfactのあつまり)かもしれないが
　世界についての実験で確認できる言明をfactと呼びたいので、意図とあっていない)

　もしも知識に
　　(2) αv-P(b)  
　があったとすると、これと(1)から
　　(3) αv+P(c)
　がでてくる。
　これは、-P(c)ならばαということであり
　婉曲に+P(b)がfactならαだと言っている。
　つまり、外界からfact +P(b)が得られなくても-P(c)が得られれば+P(b)と思って良いということだ。

　外界で-P(a)をえるとは、外部システムは?P(a)を検出する分類システムが含まれるということ。
　外部システムに前提を置くのはよくないかもしれないが、
　外部システムは、?P(a)と同様に、?P(b)や?P(c)の検出装置も含むかもしれない。
　a,b,cのそれぞれについて?P(-)を検出する装置があると、同時にa,b,cについて?P(-)を実行して
　その結果を返すのであれば、
　　(4) facts {-P(a), +P(b), -P(c)}が帰ってくる。
　これができるためには、a,b,cそれぞれについて判定する仕組みがあるということで
　たとえば、酸性、アルカリ性を判定する実験が独立にあるようなケースかな。
　一つの装置でa,b,cを判定できてもよい。
　これを全(ドメイン)検査型Observerと呼ぶことにする。

　これなら否定形のfactはありうる。
　factsの中のどれか1つのclauseが+になる場合は、P(b)についてresolve/removeができ、
　-P(a)と-P(c)がfactなので、+P(a), +P(c)をresolveし、-P(a),-P(c)を含むclauseを除去する。
　とできる。

　すべての場合の独立な実験/検証ができない場合は、+になるclauseがないかもしれない。
　{-P(a),-P(b),-P(c)}がfactsだといわれた場合のこと。
  fact+P(d)となるdがあるのかもしれないが、それを判定する実験装置がないということを意味する。
　Domain(P(-))が未確定であるということでもある。

　知識に
　　(4) ∃x+P(x)
　と書かれていたら、a,b,c以外のなにかが存在すると仮定するしかないが
　そのような知識は役に立たないのではないか。
　skolemizeしたらxは定数になり、skolem関数/定数を導入するということはその定数は
　知識DBに出てきていない定数となる。
　それは観測できるかどうかわからないが、何かがあるという仮定であり、EOLOでは役に立たないということ。

　*** 知識にない定数は扱えない。
　　　* 変数を含む定数的表現
　　　　(例えば実数/浮動小数点数の値だと、知識DBに書けないか、膨大な数の定数/知識clauseが必要となる。
　　　　それを抑えるためには、たとえば a<=x && x<=b ≡ x ∈ [a,b] などと書いて、これを定数扱いしたくなる。
       "x if Φ(x) "は定数として書けるか?
   )

* 知識DBと言っているものが、「仕様書」だと想定することもできそう。
　前に試してわからなくなった「懐中時計の故障問題」も、
　故障の動作確認はEOでやるとして、その結果(fact)を知識(仕様書)にあてはめて、故障箇所を求める、
　というシナリオであれば、できるかもしれない 

