1. rubbishの名前をかえる
2. rubbishのview-rubbishの画面を考える
　<page; control>

　page
　　title
　　clauses
　　control
　　　: cid in clauses
　　　

Pageには何を表示し、どのような操作を行うか

1. goals (当面のgoal clauses)
2. KB (input clauses)
3. new fact (追加のfact)

* シナリオ
0) 実験一般
・clauseの変換(cid)
・情報確認(cid, lid, proof, 
・unification実行
・substitution実行
・p-*, s-*

1) 故障修理
入力
Spec: clauses /cid
Fact: 動作の結果
=>
検査事項(Fact式)

2) 20の扉
前提:
　出題者と回答者は同じ知識を持っている。知識は違ってもよい。
　用語(述語記号、定数名)は変換できる。日本語になったとき同じになればよい。
　20の扉は回答者の知識を変形させていく。回答をfactとして
回答者の処理
　1. 回答者の知識から問を作って提出する。
　　　問は、factの形をしていて、
　2. 出題者は、出題者の知識を用いて問の真偽を計算し、それを回答者に伝える。(これがfact)
　3. 回答者はこのfactを使って回答者知識を変形する。1に戻る

3) ケーキのレシピ(レシピシステム)
調理者はレシピをもとに調理をし、ケーキを作成する。
このとき調理者のしていることをやるシステム。
レシピは、そのまま機械的に実行できるような手続きとして描かれていない。
その不確定な部分は人間(外部システム)にまかせる。

人間が何か作業をすると、材料が変形され、調理概念がすこしずつ達成されていく。
たとえば、メレンゲができたり、ケーキの生地ができたり。

人間の作業によって調理空間が変形され、新しい状態ができると、レシピの次のステップが実行可能になり
人間の次の作業が可能になる。

という感じでHuman-Recipeサイクルがまわっていくイメージ。

レシピシステムは、factの形で人間に対する指示を出す。
人間は、その指示を解釈して何かをする。
その結果、調理空間に変化があって、レシピの次のステップが実行できるか判定するのはレシピシステム。


この例では、ある種の手続きの記述であるレシピが、人間に対するあいまいな指示に変換されていく。

レシピをclauseの集合で表現したとする。Ρをレシピのclause集合とする。
Ρのclauseは、発火条件、作業、から描かれる(手続きか)
　-B1 ∨ P1
　-B2 ∨ P2
　-B3 ∨ P3

条件B1が満たされると、P1がGUCになるので、人間への指示と解釈できる。
人間がP1を実行すると、調理空間が変化し、例えば+B2が満たされるようになる。(これはどうやって判定するのか?)
+B2によって-B2が消えて、P2がGUCになり、新たに人間の作業ができるようにな。

"生地を焼く"という作業の場合、「オーブン」が登場しそうなものだが、そこらへんのややこしいのは全部人間にまかせるので「オーブン」はでてこない。

実際には、人間が、生地をセットしてオーブンのスイッチをいれ、焼き上がったら、センサーが焼けたことを判定して、+B3をLogicに伝えるのでよい。

## 他の方法

  -B1 {P1} +B2
  -B2 {P2} +B3
  -B3 {P3} +B4

ここでP1,P2,P3は処理であり関数formのように考える。

{P1}は+B2よりも前に実行し、P1の処理が終了したら、消滅する。

{}の記法を実行するためにLogicを拡張したくなければ、

-B1(x) +B2(p1(x))

のように書いて、+B2の処理の前に引数のp1が実行されるようにしてもよいかも。
この場合、factを検知せず、p3(p2(p1(x)))のような関数の合成で処理の順番を表したプログラムの合成を作るのでもよいかも。

　{if P1 then P1; if P2 then P2; if P3 then P3}

ともできそう。

しかし、Prologで論理式を実行できる仕組みができるのであれば、

　-B1 ; P1
　-B2 ; P2
　-B3 ; P3

のようにorを ; で書いて、
　P1,P2,P3をこの順番でresolveしていくような論理式/resolventが作れれば良い。
これはPrologの拡張になるのか。

P1が実行されたら+B2が成り立つというのを

　-B1 ; P1 ; +B2
　-B2 ; P2 ; +B3
　-B3 ; P3 ; +B4

のように、P1の事後条件を呼び出し側で書くというようなことをすれば
プログラム合成もできるだろう。


ポイントは、レシピという処理手順を人間のと作業というより詳細な処理手順につなげられるということ。




