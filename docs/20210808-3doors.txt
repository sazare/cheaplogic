3つの扉を例に次の点について書く 2021/0808
1. 知識の書き方
1.1 知識における変数の意味
2. チャレンジの書き方
2.1 チャレンジにおけるit の意味
3. ゲームの進行
4. 必要なAPI


1. 知識の書き方
　20の扉の知識は、ある「もの」を当てるための性質を書く。
　「当てるため」というのは操作的だが、単に、「もの」と「その性質」の関係かもしれない。

　例えば次のように書く。

-- j3d-do2.wffの一部
1 (eqv (x) (+ What x 象) (+ Is x 大きい)(+ Has x 大きい耳)(+ Has x 長い鼻)(+ Is x 動物))
2 (eqv (x) (+ What x 兎) (+ Is x 小さい)(+ Has x 長い耳)(+ Has x 赤い目)(+ Is x 動物))
3 (eqv (x) (+ What x 鯨) (+ Is x 大きい)(+ Behave 水を吹く)(+ Is x 海棲)(+ Is x 動物))
4 (eqv (x) (+ What x ライオン) (+ Is x 肉食)(+ Is x 強い)(+ Is x 王様)(+ Is x 動物))
5 ...
以下略

eqvは
同値関係で、What述語で書いているのが答になる「もの」であり、(+ What x 象)は、「xが象である」に対応する。
象の性質として、大きい、大きい耳、長い鼻、動物である　という条件をあげている。
条件が4つあるので、3つの質問では答えにたどりつかない。扉が20あれば間に合うが、扉のシステムとしては
途中で他の候補がなくなったら答とみなすなどの処理は必要だろう。

述語記号は他に、Is、Has、Behaveを使っている。「もの」の性質を書くので、この2つの述語でだいたい足りている。
他に必要な関係もあるかもしれない。必要に応じてふやせばよい。

このようにルールでは変数を使える。これらの変数に現実に存在するすべての「もの」の名前を代入して
ルールが正しいかどうかを判定する必要があるが、まずは人間の知識にしたがって書くことができる。

これらのルールが不足していたり、曖昧だったりするかどうかは、syntax上はツールでチェックできるだろう。


書かれた知識の中でしか、答えがでないのは、すべてを知識として書いていないからとも言えるが、
もしそうなら、この方法は大量の知識の場合、限界に達するのではないだろうか。
その解決方法は?

*
上でもすこし触れたが、扉の数が20で足りるかどうかは、この性質のリテラルの数で決まってしまう。
他の式にでてこないリテラルは無視してもよいので、それらをチャレンジから除くといったアルゴリズムは
考えられるが、論理システムとしてはこうなるだろう。


1.1 知識における変数の意味
知識(Σ)が「何について」書かれているものか、何について書かれた知識か、というのはポイントになる。
つまり、チャレンジャーのitという定数は、20の扉の設問者が考える「何か」を示す。
設問者とチャレンジャーの共通の話題でありながら、具体的な名前を出せない(チャレンジャーはその情報を持たない)
ものをitという定数で表している。

知識にはitはでてこない。itのはいるべき場所が変数xで表される。
Σの変数をxしかでてこないが、これは同じである必要はないので、仮にxとしたという程度のことである。

*
たとえば(+ Is x 大きい)は、(+ 大きい x)と書いても良い。述語が増えるので、proverとしては相手を探すのが容易に
なるが、用語が増えると言葉のぶれも気にしなくてはならなくなるだろう。たとえば、大きい、でかい、巨大だとか
言えてしまう。

*終わり方
2. チャレンジの書き方
2.1 チャレンジにおけるit の意味

j3d-do2.lispでは、チャレンジの回答を
(defparameter fc1 (make-clause '(() (+ Is it 大きい))))
(defparameter fc2 (make-clause '(() (+ Has it 大きい耳))))
(defparameter fc3 (make-clause '(() (+ Has it 長い鼻))))
(defparameter fc4 (make-clause '(() (+ Is it 動物))))
となるとして、コードを書いている。

このように、チャレンジの中にitという定数がはいり、設問者はそのitを使ったfactを返すことになる。

このシステムでは、(+ Is it 大きい)がrejectされると、(- Is it 大きい)が真になるので
真であるリテラルを含むclauseは矛盾にたどりつけないことから、
(- Is x 大きい)リテラルを含むclauseは除去される。
このような処理は正しいと思うが、20の扉をこえて複雑な場合も考えると、はっきりわからない。

3. ゲームの進行
* j3d-do2.lispでは、チャレンジが進み、ΣにGUC(Ground Unit Clause)が生まれた時、それを正解としてチャレンジするような
アルゴリズムになっている。
知識が包括的で間違っていなければ、そうなる可能性がある。
上にも書いたように、他の知識にでてこないリテラルを無視すると、実はその性質が違っているという可能性はある。
Whatに対して、関係のある述語をすべて列挙してあれば、関係のない性質はそのWhatとは関係がないのだから、チャレンジする必要がない。
ある「もの」について絶対に関係のない性質というものはありうるので、そういう性質についてチャレンジする必要はないから、これは正しい。
しかし「もの」のすべての性質を列挙するのは不可能であり、そこらへんが20の扉のゲームとしての面白さかもしれない。
知識の観点からみると、知識体系のずれが、正解にちかづけたりできなかったりする。

*課題
設問者とチャレンジャーの知識の違いから、知識の変換の話につながる。
知識Aと知識Bで、片方に存在する概念がもう片方にないことはありうる。
チャレンジャーのもつ「哺乳類」 が設問者にないとか。
そのとき、チャレンジャーは「哺乳類」の定義にもどって、「卵をうむか」とか、わかりやすい表現にかえて「赤ちゃんにお乳を与えるか」などというチャレンジにかえるか、あるいは調停者が、そのような定義の調停を行うのだろう。
あるいは、調停者が設問者のかわりに回答するのかもしれない。

知識の変換は、20の扉というゲームの中では、いかようにも解決できる。
応用論理の枠内で考えると難しくなる。


4. 必要なAPI
他の例でも使えそうなapi
1) resolve literals(in rubbish)1
   resolve-id

2) search compatible literals without *lsymlis*
  no such function. it is embedded in the following functions. 

3) convert knowledghe (factをKBに適用する)
  reduce-kb 

4) find final answer(上に書いたように、知識の形によっては正解と限らない)
  find-fact
















