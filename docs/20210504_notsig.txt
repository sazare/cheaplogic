what is negation of unifier

0. factはground unit clauseである。
　　{P(a,x)はないのだろうか}

　Σに対して、factのシーケンス f1,f2,...,fkが順番にやってくると考える。
　どのfiも別のfjとことなる。

　+P(a)は、aのときPであるというfactになる。
　-P(a)は、aのときPではないというfactになる。
　これができるには、Pという述語の解釈=外側のシステムが、+P(a)か-P(a)かを判断できるということ。

　処理上、+P(a)がfactのとき、-P(a)はfalseになることが確定する。
　clauseに-P(a)つまりfalseが含まれている場合、それは除去できる(resolution)
　+P(a)が含まれている場合は、そのclause全体がtrueになるので、clause setからは除外できる。


1. clause set ΣとΣの外側から与えられるfact f=L2を考える。
　20の扉の場合、
　　(1) clause  α v ~L1 と 
　　(2) fact L2
　があって、
　　∃ σ12=<L1:L2> 
　なら、Σの(1)をresolvent(3) α・σ12 で置き換えてよい。
　なぜなら、同じ形のL2は二度と登場しないから、L1を消す相手はL2以外にないと言えるので。

2. もしもL1に変数があるならば、このような置き換えはできない。
　　つまり、L1[x]で、L2[a]であったとしてもL2[b]というfactが登場する可能性があるから。

　　L2[b]の相手を残しておくために、通常の証明器のように(1) をそのまま残しておき、
　　Σに(3)を追加する、という手続きが行える。
　　{このときはΣ同士でΣxΣを計算する必要がありそう}

3. しかし、L1[a]の部分についてはもう解決しているので、x!=aの部分についてだけ(1)を残せればよい。
　　それを
　　(a) L1[x]{x!=a}
　　と書くとすると、clause(1)は
　
　　(4) α[x]v~L1[x]{x!=a}

　　で置き換えることになる。

　　代入の形で書くとすると
　　{x <- ~a}とか~{x<-a}とかになるのだろうか

　　{x<-~a}&<x:b>

　　は、xを中心に<~a:b>となり、~a!=aであり、b≈~aみたいな感じなのでunifyできる。

　　<x{x<-~a}:b> = <~a:b> かな

　　<x:b>if x!=a は<x{x<-~a}:b>であり <~a:b> が<x:b>の成立条件であり、{x<-b}が受容される。

　　これを処理の形にするにはどうすればよいか。

　　もともとは<x:b>なのだが、条件{x=~a}がつくので、<~a:b>がなりたてば<x:b>はよい。
　　ただし<x{x=~a}:b> の条件が∃<~a:b>なのであり、このふたつの<:>が同じ値という意味ではない。

　　すると、<x{x<-~a}:b>と書くのがよいか。<x{x~a}:b>か<x/a:b>とか。
　　<x~{x<-a}:b>と書くのがよいか。

　　factシーケンスとして、L2[a], L2[b], L2[c]がくるとすると、まず
　　disagreement <x:a>から{x<-a}が作られる。(1)からこれをのぞいたバージョン(1')を作ると次は
　　disagreement <x~{x<-a}:b>がおきる。なにかうまい処理で{x<-b}が得られると、次は例えば
　　<x~{x<-a,x<-b}:c>のようなdisagreeとなる。
　　{x<-a,x<-b}は代入の記法だが、ここでは代入ではない。代入の裏側みたいだ。
　　それなら
　　<x~{x<-a&b}:c>とか<x~a;b:c>とかがよくないだろうか。
　　代入に過去の履歴が蓄積されていくのは好ましくない。

***　極大フィルターを削ってく感じ・・・

*　　P(x)というatomのunification/resolutionの状況を反映したいのだから、代入の中に履歴を入れない
　　でよいのではないか。


*　　代入の否定は、それでproverがうまくできるのではないかという期待があって、考えているが
　　うまくはいかないようだ。







### 検討
　　本来やりたいことは、<L[x]:L[a]>でα v ~Lから~Lが除去されると
　　a以外の部分についてはまだ情報を取れていないから、元のclauseを残しておきたいということ。
　　だから
　　~a = dom(x) - {a}
　　をのこすような元clauseの制限を書きたいということ。
　　元clauseは出現変数も書くとこうなる。

　　(1') α[x] v ~L1[x]

　　これに対してresolvent α[a] のカバーできていない範囲を表したいということをこう書くということ。
　　　
　　(1'') α[x] v ~L1[x] if x!=a

　　になる。~L1[x]if x!=aとなるのか (α[x]v~L[x])if x!=a となるのか?
　　変数xの出ている範囲で有効になるべきだから後者だろう。

　　(1'')の処理をするとき、xが関係するunificationで、常にif x!=a をつけて処理するということか。
　
　L1[a], L1[b], L1[c], ... の場合ifで書くのなら
　　(1k) α[x] v ~L1[x] if x!=a, x!=b, x!=c, ...
　とandでつなげればよい

　　このとき、xはaでもbでもcでもない。!=以外の述語が使われないのであれば、(ifnot a b c)でよいだろう。

　### 
　普通のresolution proverでは、Σにresolventを追加していくだけだから、こういうことには悩まない。
　もしも同じL2を持つ別のclauseがあって、それと(1)をresolutionする場合、両方のresolventがほしい
　ならば、こういうことを悩まない。
　20の扉では、
　　1) factが相手(つまりunit resolutionか)
　　2) 同じfact/同じ述語記号のliteralは二度とでてこない
　だからこういったことはおきない。

　*** 問題の特徴によって証明器の構成もかわる。

#####
　同じclauseから複数のresolventがでるのはよい。
　L1が同じmguで消されるとき、得られる情報が同一ではないのか?

　  (1.1) +P(x) -R(x,x)
　　(1.2) +R(a,y) -Q(f(y))
　　(1.3) +R(a,y) -Q(g(y))

という場合がありそう
(1.2)と(1.3)は条件のついていない代替である。
ということは、たんに曖昧な関係になっている。

知識DB/知識の表現において、あいまいな関係はあってもよい。
情報不足でどっちか決まらないという場合か。

情報を取り出すという点でも、曖昧さは排除する必要がない。

###

　　代入に変数がxしかでていない場合ばかり考えているが、複数の場合はどうなるか?? □

　　(5) L2[b]

　　のresolutionでは

　　<L1[x]{x!=a} : L2[b]>
　　を行う。これは次のように処理する。
　　1) <L1[x]:L2[b]>=∃{x<-b}
　　とmguをもとめて、これとx!=aの矛盾チェックになる。
　　mguなので片方は必ず変数だから、矛盾といっても同じ変数について相方がunifiableかどうかの確認になる。
　　unifiableなら失敗。


　unificationの定義
    <x if{x!=a}:a> : fail
　　<x if{x!=a}:b> : {x<-b}

　代入とは何か? mguとは何か?
　dom(x) = H ; Universe
  ‖t[x]‖ = {t[u] | u in dom(x)} ; termの集合

   σ={x<-t}は、dom(x) ⊇ ‖t‖
 　~σは、not(dom(x) ∋ ‖t‖)

  <(x,x):(x,f(x))>の場合<x:f(x)>を求めるが
　　H != {f(x)| x∈H} = f(H)　なのでfailになる。
　　f(H)には定数が含まれない。

　mguとは何か?
　　記号では
　　tσ ≡ sσ
　　なので当然
　　‖tσ‖ = ‖sσ‖ 
　　では、
　　‖t‖ と ‖s‖ との関係はどなるのか?

**  <t if Φ : s>は Φが成り立つ場合に、<t:s>である。

