レシピの例

1. 概要
レシピは、あいまいに書かれた操作の記述である。
もちろん、経験をつんだ人には曖昧さなく手順を伝えることができるのだろうが、レシピ自身には書かれていない情報を、料理人が経験で補って調理をすることを求めるのは間違いない。

レシピは、番号のついた手続きのような記述の並びである。
「手続きのような」というのは、その記述のままをコンピュータが理解して、調理を行うことができないからである。

レシピをみて料理をする場合、次の機械外の操作が必要である。
1) 調理台の上にできているものが何かを判断する。
2) できているもので作れるものをレシピからよみとる。
3) できているものから何かを作る作業をレシピからよみとり実行する
1)〜3)を、目的の料理ができるまで繰り返す。


[難しい点]
　材料の量はおおまかである。
　レシピの曖昧な記述が理解できるほど、料理をよく知っている。
　たとえば「生クリーム」とか「メレンゲ」という言葉ができててた場合、今できているものの名前の定義なのか
　他の学校で習ってきた定義に照らし合わせてそう呼ぶものができているとするのか、明確でない。
　作業は別途、学校での学習が必要。


[どのようなシステムが必要か]
1) レシピの番号ではなく、材料が用意できた(観察状態)により、トリガーが発火。
　　これは、プログラムの生成ではない。あるいは、そのような計算機構の上でのプログラムとしてΣを解釈している。
　　
2) レシピの1ステップには、
　　できている材料の名前
　　材料に対して何をするか
　　オプションで、できたモノについて名前をつけたりする。

・定数はあらかじめ決められている。skolemizeは勝手におきない。
　なぜなら、それが表すものを、センサーとロジックで共有する必要があるから。

　必要ないのだろうか


* 同じ手順を繰り返すことはあるのか?
* ことなる手順だが、前提となる状態に同じものがあることはあるか?
　例)
   1) -P(x)-Q(y)+R(x,y,z)
　 2) -P(x)-S(y)+U(x,y,z)

　この場合、共通の事前状態P(x)はあるが、QとSで判別できる。QもSもない場合、はやいものがちでいいのか
　これは、レシピ次第。ある材料を作るために、先に行うべき作業があるのかもしれない。

　最初に用意した材料が+P(a)の場合、1)か2)か選べないかも。
　同時にできるほど材料がたくさんある場合は、+P(a)が二個とかいうことになるのか。

Recipeでは、観測データの量も課題になるかも。

[API]
一般形: -OB1(x)-OB2(y)-PC1(x)-PC2(y)+MA1(x,y,z)+MA2(x,y,w)
  OBnは、観測された状態にマッチさせる
　PCnは、作業するために必要な状態が準備できたかどうかの判定
　MAnは、実行する作業の起動。zやwは結果が入る場所だが、作業場所の状態がすべてを決定するのであれば不要
　　　　　作業場所の状態でなくclause間のデータの受け渡しで書きたい場合は、排除してよいか?
　　　　　たとえば、卵白とクリームを攪拌するという作業で、できたものを「メレンゲ」と呼ぶとき、この書き方になるのか。
　　　　　([メレンゲ問題]参照)
　OBnがあれば、PCnは不要かも。
　しかし、PC3(x,y)みたいのがあると、2つの素材が同時に準備できることが表現できるので、そういう判別は必要になるかも。



* 判定条件
　- PCnについては、ground literalは評価し、
　　　Tならclauseから消す
　　　Fならclauseを除去する


* 作業呼び出し


* 状態



[メレンゲ問題]
ある作業でできたものを「メレンゲ」と呼ぶという記述があった。
メレンゲは述語なのか定数なのか?

観測装置が「メレンゲ」だと判定できると考えるか
ある作業をしてできたものを「メレンゲ」呼ぶのだと考えるか。

前者の場合、「メレンゲ」は観測装置と作業装置(人間)とΣの言葉遣いに共通の語彙になる。

レシピで「メレンゲを〜する」と書かれた場合、観測装置が「メレンゲ」だと判定しなくてはならないはず。

もしも、攪拌してできたものを「メレンゲ」だと名付けるとするならば、「攪拌の終わり」を観測装置は判定できなくてはならないのか。
観測した命題を見て、「攪拌の終わり」を判定できるようなΣが必要か。

実際には、攪拌中のクリーム状のものがどれくらいしっかりと形状を残すか(可塑性?)によって攪拌の終了が決まる。




[整理]

