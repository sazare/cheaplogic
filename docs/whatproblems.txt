20191019土

1. 問題の分類
変化しない公理系の場合
・製品の仕様と故障
　1) Factは製品のインスタンスの今の状態
　2) Factと違うかもしれないが、製品の機能に対する期待=仕様
　　　これは一般論といえるかもしれない。
　　　今考えている公理は永遠の真理ではない。
  3) FactをG、仕様をAとすると(A,G)の矛盾するところに故障の原因があることになる。
　4) たぶんAの仮定部分に間違いがあり、Gと矛盾するのではないか。
　5) 故障についても仕様化されていると、矛盾はおきず、その条件の場合の異常と考えられる
　　 状態が述べられていることになるはず。仕様通りであることは故障していないことを意味しない?
　6) Aの仮定部分からのルールによってGと矛盾する場合、ルールは正しい。
　7) Aのルールの部分に間違いがあるかもしれない。
　　　それはどうすればわかるのか???

・増加する公理の世界
　1) At={a1,a2,...,at}で時刻ごとにatが増えていく。
　2) A_{t-1} U {at} |- [] の場合
　　　A_{t-1} |- ¬a_t であり、∃A' A' subset A_{t-1} ; A' |- ¬a_t でA'は最小
　3) a_tが必ず正しいという仮説
　　　Last Fact Strongest Hypothesis(LFSH)
　　　観測方法が十分に信用できればこれが成り立つだろう。
　　　その場合はA'が変わってしまったということになる。
　　　どう変化させるかは別の問題。

　4) Factは必ずしも真ではないという仮説
　　　Fact is not always Valid (FNAV)
　　　観測には間違いがありうるので、必ずしもA'が正しくなくなったとは言えない。
　　　
　5) いずれにせよ矛盾するSubsetを求める必要がある。
　　　これが問いの形ではあるが、それはどのような使われかたなのか?
　6) メタな問いのような気がする。

　7) これは公理系が動的に変化していくシステム。
　　　そのとき、「正しい」ということに確定した意味がないような・・・
　　　AからA1(factがtrue)であるとする分岐とA2(factはfalseである)とする分岐が発生する?
　　　そこはどちらの仮定を置くかか、あるいは個々のFactについて真偽を評価するのか。
　　　一つの観測/実験で真偽を決めず、複数のテストで決める・・・そういうテストセットを
　　　ひとつの評価サブシステムとして考えれば、証明器としては真偽が決まっているとみなせばよいか。

　8) A'がa_tと矛盾するとして、a_tが否決しているaxiomsはひとつとは限らない。
　　　(座標変換とかもある)
　　　何が変わるべきか?

　9) a_tを秘訣するのなら、a_tを入れなければいいだけなので簡単だが、そんなに簡単なのか???




2.個別(製品の場合)

回路の問題を考えていくと、Axiomを使って、どのような問題を解きたいのかが曖昧だったと気づく。
AxiomとかFactとかの意味もはっきりしてきたかはっきりしていない。

Axiomsで何を記述し、どのような問に答えるのか?

goal(Γ)とは質問であり、Axioms(Σ)からΣ → Γの証明で生まれる代入σがその質問への答えを生む。
というスキームがあると思う。

clauseであることの特殊性として、Γもまたclause setになる。
[]の証明で、Γのすべてのclauseを使わなくてはならないという制約も必要かも。


1. 回路の場合
考えると、回路の場合はこのようなタイプの問(goal)がありうる

1. Axiomsをその製品の仕様と考える。利用者に見える部分を変数とするリテラル/述語が
　その製品のある状態を表し、goalは、その製品のある状態を表す(ground clause)
　その状態が製品の仕様に整合しているかどうかの問? 

　ある製品はいろいろな側面を持つので、製品全体について仕様の可否を考えようとする
とgoalに含まれるすべてのclauseが成り立つ必要がある。(goalのclauseすべてを使った証明制約)
だろうか??

2. 実際の製品を使っているとき、発生した状態をground clauseで表現する。
　製品が正常動作しているかどうかのテストができる。

3. Goalに変数を含むとき。ある条件で、その製品が取りうる状態を調べられる。
　これは、製品に対する問い合わせの回答を与える。

4. ある状態のGoalから始め、それが異常であるとき、どこに原因があるかをテストで調べたい。
　テスト結果はFactとしてAxiomsに追加できるが、Fact+Axioms |- []の場合、製品は異常である。
　片方しかないリテラル(+Pに対する-Pがないなど)があると、そこからCano経由で外部にFactを
　尋ねることができ、それがテストの誘発になる。
　それは仕様の欠陥かもしれない。仕様にすべてが書かれていたら、正しいはずの仕様(=Fact)が
　現状のFactと矛盾して、原因がわかるはず。

　このように、Factには、期待のFactと観測されたFactがある。

　期待のFactはFactではないのだろうか。

　


2. 記述の構造化。それができる証明器のありかた。
　製品を書いていくと、部品についての記述と製品についての記述などに分かれているように見える。

2.1) 期待と観測
　製品の仕様は、期待のFactであり、そのレベルでの記述集合はある。
　それがないと、製品に関するあらゆる事柄が、まきこまれてしまう。
　それが証明のメリットではあるが、証明機構には定理というものがあり、全体のまきこみを防ぐ。

　期待と現実をどう区別すればよいのだろうか。
　期待の定理は、あくまでも期待についての推論結果。
　観測のFactから、正しい推論によって得られた観測の定理は、現実世界について成り立つ推論。

　期待と観測を区別し、その間の矛盾を観察するというのが正当な気がする。

2.2) 製品dとそれを構成する部品p
　dの構造についての記述は、エンドユーザには見えない。
　dのユーザに見える部分が、ユーザに対するdの状態と解釈できる。
　ユーザというが、dがおかしな振る舞いをしたとき、調査する人は、その文脈でのdのユーザであり
　文脈がかわると、dについて見える部分もかわる。

　パーツpは、状態をもち、そのdにアクセス/観察する誰かはその状態を見て、それを部品dの状態と
　解釈するしかない。

　構造と状態=機能の関連はどうなるか??

　どんどん分解して記述できるのか?

2.3) 機能と構造という考え方は正しいのだろうか。
　構造を分解していって、個々の部品の機能が全体の機能になるだろうか。
　そこには解釈がはいる。

　階層の上下は解釈による昇降ということだろうか★
　

