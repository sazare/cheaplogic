logicはどうすれば役に立つのか?

Kowalskiの本には例がいろいろ書いてあるが、どう役に立つのかはよくわからない。

SATはいろいろなシステムに導入されて、効果がでているらしい。
　バージョン管理

Alloyはモデル検証に使えるが、SATを使っている。
　Alloyは変数ありの論理式を対象とする。


プログラムと論理の対応はある。
Prologの愛好家は、論理式で書いた仕様をそのまま実行できるので、正当性が保証されるとかいう考えをする。
　実際には、Prologの論理式で書いていることはプログラムを自由度あげてかけているだけで、
　プログラムが論理式にかわっただけだから、正当性といってもそんなにうれしくない。
　ブログラムの正当性を証明するときにいろいろでてくる概念を論理式に書くと、どうなるかとか
　　工夫しなくてはならないが、そういう表現方法について議論がされているとは思えない。

何を期待するか

　エキスパートシステムでは、論理式で表した知識に基づいて、いろいろな状況で行うべきことを導くような話になるのではないか。
　演繹システムは与えられた知識の中で推論するだけなので、知らないことはでてこない。
　
　述語記号がでてくるが、記号というものを扱うのはたいへん。
　　一文字間違えれば、他の概念になってしまう。プログラムは実行を伴うテストで、間違いを発見できるという側面があるが
　　論理式だとどうか?　述語記号がベースになっているので、それが間違っていたら何が正しいのかわからなくなるのでは?

　論理式は、記号自体でなく、それが表現するものの制約条件が重要であり、



・論理に基づくシステムで何がしたいのか?
　・すこしの論理式から推論する場合、あまり期待するほどの効果はないはず。
　・大量のfactと知識から、考えてもみない知識が得られることが、なんとなく期待されていることではないか。

　　演繹システムは、知識として述語記号を使って書かれた表現のインスタンス+論理結合表現しか導けない。

　　数学は、そのような証明機構によって、知らないことを勝手に証明に持ち込まないようにできている。

　　数学で新しい定理が生まれるのは、問題を表現するための定義を作り、定義が問題をよく表現していることをもとに
　　その定義で論理的に導かれる定理を求める。これが、新しい知識となる。
　　ということは、「定義」によって、新しい知識表現を作っているのであり、そこに定理を証明するに足る知識が書かれていなくては定理の証明はできない。定義をどうするかというのが一番難しい部分になる。
　　これはなにか「カンニング」をしているような気になる。

　ということは、

　応用論理システムに、演繹しかないのであれば、解決したい問題のすべてを論理式で表現しておかなくてはならない。
　あるいは、問題発生にともなって、知識を機械的に拡張できるとか、そういう仕組みが必要そう。


・人間が求めているものがそうであるならば、演繹システムでなく、帰納を行うシステムが必要になる。
　帰納システムというのは、factのあつまりから法則を見つけ出すシステム。

　数学ならば、算術の知識をながめていて、方程式の解の一般解を求めたいという問題設定から、群の定義を見出すような話。

　問題から知識の表現を見つけるという意味で創造的であり、演繹的ではない。


[課題]
・述語記号は硬くて使いにくい
・問題なのは個別の証明ではなく、問題が発生したときに、どのような公理=知識表現を組み立てるか、組み立てられるかということ
・これは帰納的論理の枠にはおさまらないのではないか。
　問題が発生したとき、新しい問題を表現するために、新しい記号と、正しい制約条件/定義を作る。
　　その定義は、従来の知識で定義でき、矛盾していない(well defined)であり
　　問題の解を導けること
　が必要。それがこの作業の制約条件。
　問題の解を導けるかどうかを判定できるか? できないので、試行錯誤が必要になる。

ということは
　・問題を含む世界(対象と操作)が記述できる。
　　・解が表現できるほどに十分な概念が定義されていなくてはならない。
　　ということは、ある意味、答えがでているということか?
　・問題を解決できる知識を表現できているならば、答えはでている・・・

　・個別の問題でなく、問題の集合をどう設定するかにより、この知識の表現はかわることになる。

　・これを機械的にできるか????


1. 問題の定式化は機械的にできるか?
2. 知識は解法を含んでいる。
　　解法を導くことまでやりたいなら、そのすべての知識が必要になる。

****
1. 解法の知識 ≈　問題の範囲と定義表現の定式化
　　これは一方が決まって、他方を導くのではなく、両方のバランスをとりながら決めていくのではないか。
　　なぜなら、問題の範囲は何がしたいかで変わってくるし、それとは独立に解法が決まるものでもない。

2. しかし、自然知能は、これをやっている。

*****

1. 問題を認識するとはどういうことか?

inputとoutputを決めること自体が大仕事である。
つまり、解決したい問題を、コードのin/outで表現し、それが解決したい問題を適切に表現できているかどうかという判定が
できなくてはならない。

「解決したい問題」

プログラム開発は、「解決したい問題」になんらかの表現を与えたところから始まる。
設計プロセスは、その表現の枠組みを見出すところにあたる。


******
機械的に「解決したい問題」の表現が導けると思うか???

******

もしも、問題解決に必要な知識が与えられたとしたら、証明器でその知識にたどりつける。
大量の知識の場合には、機械的な証明器にも意味があるかも。

証明とは何か?

存在についての証明が、その構成方法の情報をもつならば、それは役に立つ。

もしもそのような知識がすでにあるのであれば、今の人類なら、それをプログラムとして書くという方法を選ぶだろう。

論理式による知識表現は、計算すると効率がわるい。計算でなく証明プロセスになるから。

******

ある問題を解決するのに証明器を使おうと思ったら、解決知識があらかじめ必要であり、たぶん、その知識を機械的に求められないかという期待がうまれるだろう。

機械学習は、問題の定式化はできないので、そういう目的にはむいていない。

*******
統計的な方法、確率的論理などでなにができるか?


******
問題を定義するのは人間である

として

* 解決方法を求めるには、解決方法を知らなくてはならないということ。
* 解決方法は、問題の定義によってかわってくる

だから、「解決できるように問題を定義する」のが合理的な方法。














