20の扉の続き
必要なこと
1) 質問はたとえばこうなる
　a) それは鯨ですか?
　b) それは動物ですか?
  c) それは大きいですか?

a) は、対象の何かを確かめる問
b)c)は、対象の性質を確かめる問

違わないように見えるが、20の扉の知識としては区別したい。

2) つまりこのクイズでは、Ans(a)がtrueになった時点で成功として終わる。
　　問はfalseである間、20回回答を求めることができる。

3) ということで、知識はこういう形になる
    What(Elephant) <=> Is(big) and Is(bigear) and Is(longnose) 
　　What(Rabbit) <=> -Is(big) and Is(bigear) and Is(longleg)

これをclauseにすると

1<    +What(Elephant) -Is(big) -Is(bigear) -Is(longnose) 
2>    -What(Elephant) +Is(big) 
3>    -What(Elephant) +Is(bigear)
4>    -What(Elephant) +Is(longnose) 
5<    +What(Rabbit) +Is(big) -Is(bigear) -Is(longleg) 
6>    -What(Rabbit) -Is(big) 
7>    -What(Rabbit) +Is(bigear)
8>    -What(Rabbit) +Is(longleg) 

4) たとえば、「それは動物ですか」という問は、集合の切り分け

　What(Rabbit) => Is(Animal)

　みたいにもかけるが、

  +What(Rabbit) <=> α and +Is(Animal)

　でもよさそう

5) 想定するシステムでは、どうやって問を選ぶかは不問。
　得られた答えから、知識をどう変形していくかをみたい。

　答えは、unit claue(fact)とする。つまり
　-What(うさぎ)
　は「それはうさぎですか」と質問して、答えがNoの場合の命題。

　+Is(Big)は「それは大きいですか」と聞いて、答えがYesの場合の命題。

　もしも「それは鯨ですか」と聞いてそれが正解だったら、+What(鯨)が命題だが
　そのときは知識はそれ以上変形されないので、この正解時の知識変形ステップはシステムに含まない。

**** 名称
外から与えられる真の命題はFactと呼ぶ。
では、Factから推論されてでてきた命題はなんと呼ぶのか?

定理、系、補題、帰結、consequence、conclusion, entailment、implication

entailment : the relationship between two statements when for one to be true, the other must also be true
これで呼ぶかな。いんているめんと。


=====
書き方での混乱
　{大、中、小}だとすると、

　+大 <=> -小 and -中
　がなりたつ。

  clauseにすると 
  RtoL
　+大 or +小 or +中
　と
  LtoR
　-大 -小
　-大 -中
　ができる。

　+大 or +小 or +中
　は、
　-大 => +小 or +中
　-中 => +小 or +大
　-小 => +中 or +大
　になりうる。

　これらのルールは曖昧で、証明の途中にでてきそう。
　結論をひとつにできるルールはこうなる。
　(-大 and -小) or +中

　これはclauseではなく、2ステップの推論を1つに書いたことになる。つまり
　KBに
　-中 or α
　があって、まず
　-大 (大でない)というfactがきたとき
　-大,+大 or +小 or +中
  ---------------------
　+小 +中
　　　　　-小
　------------
　+中 -中α
　---------
　α

　ここでKBの間での証明もできるとすると、こういう証明も作られる

　+大+小+中 -中α
  ---------------
  +大+小α
　　　　　-大
  -----------
　+小α  -小
　---------
　α

　先の証明は、補題を先に証明すいるようなものだが、factの追加という処理を考えたとき
　先の証明がなくてもこのように同じ結果が得られるので問題ないはず。

　では、LtoRの3つの組み合わせ
　-大 -小
　-大 -中
　-中 -小
　はどういう影響があるか。

　前提から、factは相互に矛盾しないので、もしも+中ならば、-中はでてこない。
  だから、
  -中α
　については何も影響せず、+中がでてきたときにαにかわるだけ。

　fact + KBからでてくるunit clauseは、いかなる条件もついていないのでfactと同等に扱える。
entailmentと呼んでいいか? 意味をよくわかっていないから、それでいいような気がする。



### 
unit clauseがでてきたとき、+/-によってfactの真偽が決まる。
無矛盾拡張で20の扉の前提として、factは一度だけ尋ねられる。二度尋ねるのは非効率な問だから。
だから、factがみつかったら、もう二度とFactの真偽を決める必要があるような問/答えはない。

factが答えとしてくると、そのoppoは*KB*全体について消去される。
同じ符号のLiteralは*KB*に残り、それを含むclauseはunitになれない。
　だから、factと同じ符号でunifiableのliteralを含むclauseは除去してもよいし、残しておいても同じ。
　処理の効率がかわるだけ。

　それは {+P, +P+Q-R, -P-S}から{-S}がでてくるということ。

　*関連してA={+P, +P+Q-R, -Q, +R, -P-S, +S}の場合は
　+Pがfact/Trueだとすると、{-Q +R -S +S}となり-S:+Sから[]がでる、ということになるが
****
　一方で、Aから全組み合わせで証明を作ると・・・
   -P-S:+S => -P+Q-R:P で +Q-R:-Q => -R:+R => []

　+Pがあるから、当然これはでる。
   -P-S:+S => -P:+P => []

なにが言いたい?
+Pはfactだと主張するのだとすると、
書き方を変えてみる。

A={+P+Q-R, -Q, +R, -P-S, +S}の場合は
A|+P で+PがfactとしてのAだとすると
A|+P = {-Q +R -S +S} となり、-S|+S => []がでる。

このとき+P+Q-Rを消すという操作は、+-Pが分岐条件で、+Pを選んだから+Q-Rの道は消えたとみなせる。はず。
-Pがfactだと、
A|-P ={+Q-R -Q +R +S} となり、+Q-R -Q +R -> []となる。

このLをfactとしたとき、AからLを含むclauseを除去するルールは、なんかあったような気がする。

そう考えると、factベースにするのは証明にプログラムを導入するのに似ているような・・・

■20の扉の枠内では、知識のreductionはプログラムと同じなのかも。
■プログラムを知識が収斂していくプロセスとみるとどうなるか?

****
で、この操作を導入してもよいのか??







  


・oppoのリストは使うことがあるか?
　全oppoを得て、除去する処理の効率。
　その場合、すること
　1) lidからoppoをもとめる。
　　条件1) opposは、その時点の*KB*のcidに限定されている　
　　
　*) resolventは元のclauseを置き換える。片方はfactに決まっているので、実効の親は1つだから置き換えられる。
　

　










